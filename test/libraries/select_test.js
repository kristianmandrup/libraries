// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 06/10/14
 * Time: 14:38
 */
(function(){
  var expect, Selector, log;
  expect = require('chai').expect;
  Selector = require('../../lib/select/selector');
  log = console.log;
  describe('Selector', function(){
    var selector, select, file;
    file = {};
    before(function(){
      var select;
      select = "bootstrap\nfoundation";
      file.unknown = 'blip';
      return file.select = '../../xlibs/select';
    });
    describe('create', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Selector;
          }).to['throw'];
        });
        specify('bad nam throws', function(){
          return expect(function(){
            return new Selector(7);
          }).to['throw'];
        });
        specify('no obj throws', function(){
          return expect(function(){
            return new Selector('x');
          }).to['throw'];
        });
        return specify('when file is a non-existing file', function(){
          return expect(function(){
            return new Selector({
              file: file.unknown
            });
          }).to['throw'];
        });
      });
      return context('valid', function(){
        specify('when select option is string', function(){
          return expect(function(){
            return new Selector({
              select: select
            });
          }).to.not['throw'];
        });
        return specify('when file is an existing file', function(){
          return expect(function(){
            return new Selector({
              file: file.select
            });
          }).to.not['throw'];
        });
      });
    });
    return describe('valid selector', function(){
      var lib;
      beforeEach(function(){
        selector = new Selector({
          select: select
        });
        return lib = 'strapper';
      });
      specify('no strapper', function(){
        return expect(selector.lines()).to.not.include(lib);
      });
      describe('lines', function(){
        return specify('has bootstrap', function(){
          return expect(selector.lines()).to.include('bootstrap');
        });
      });
      return describe('add', function(){
        specify('strapper', function(){
          selector.add(lib);
          return expect(selector.lines()).to.include(lib);
        });
        return describe('remove', function(){
          return specify('strapper', function(){
            return expect(selector.remove(lib).lines()).to.not.include(lib);
          });
        });
      });
    });
  });
}).call(this);
