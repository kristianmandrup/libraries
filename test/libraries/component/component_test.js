// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 06/10/14
 * Time: 14:38
 */
(function(){
  var expect, Component;
  expect = require('chai').expect;
  Component = require('../../../lib/component/component');
  describe('Component', function(){
    var component, comp, conf;
    conf = {};
    conf.bootstrap = {
      dir: 'dist',
      scripts: {
        files: ['js/bootstrap.js']
      },
      styles: {
        files: ['css/bootstrap.css']
      }
    };
    describe('create', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Component;
          }).to['throw'];
        });
        specify('bad nam throws', function(){
          return expect(function(){
            return new Component(7);
          }).to['throw'];
        });
        return specify('no obj throws', function(){
          return expect(function(){
            return new Component('x');
          }).to['throw'];
        });
      });
      return context('valid', function(){
        return specify('name and obj :)', function(){
          return expect(function(){
            return new Component('x', {});
          }).to.not['throw'];
        });
      });
    });
    describe('valid component', function(){
      beforeEach(function(){
        return component = new Component('bootstrap', conf.bootstrap);
      });
      describe('name', function(){
        return specify('is set', function(){
          return expect(component.name).to.eql('bootstrap');
        });
      });
      describe('comp', function(){
        return specify('is set', function(){
          return expect(component.comp).to.eql(conf.bootstrap);
        });
      });
      describe('base-dir', function(){
        return specify('is set', function(){
          return expect(component.baseDir).to.eql(conf.bootstrap.dir);
        });
      });
      describe('location (dir, file)', function(){
        return specify('full script path', function(){
          return expect(component.location('js', 'bootstrap.js')).to.eql("dist/js/bootstrap.js");
        });
      });
      describe('locations', function(){
        specify('for scripts -> full script paths', function(){
          return expect(component.locations('scripts')).to.eql(["dist/js/bootstrap.js"]);
        });
        return specify('for styles -> full styles paths', function(){
          return expect(component.locations('styles')).to.eql(["dist/css/bootstrap.css"]);
        });
      });
      describe('location-obj', function(){
        return specify('for all -> full script paths', function(){
          return expect(component.locationObj()).to.eql({
            scripts: ["dist/js/bootstrap.js"],
            styles: ["dist/css/bootstrap.css"]
          });
        });
      });
      return describe('build', function(){
        specify('builds imports', function(){
          return expect(component.build()[0]).to.eql(["app.import('dist/js/bootstrap.js');"]);
        });
        return specify('first import is js', function(){
          return expect(component.build()[0][0]).to.eql("app.import('dist/js/bootstrap.js');");
        });
      });
    });
    return context('foundation', function(){
      conf.foundation = {
        scripts: {
          dir: 'dist',
          files: ['js/foundation.js', 'css/foundation.css', 'fonts/foundation.eof', 'fonts/foundation.svg']
        }
      };
      beforeEach(function(){
        return component = new Component('foundation', conf.foundation);
      });
      describe('location-obj', function(){
        return specify('location-obj', function(){
          return expect(component.locationObj()['scripts']).to.eql(["dist/js/foundation.js", "dist/css/foundation.css", "dist/fonts/foundation.eof", "dist/fonts/foundation.svg"]);
        });
      });
      describe('types', function(){
        return specify('some types', function(){
          return expect(component.types()).to.eql(['scripts']);
        });
      });
      return describe('build', function(){
        return specify('bootstrap not in list of components', function(){
          return expect(component.build()[0][0]).to.eql("app.import('dist/js/foundation.js');");
        });
      });
    });
  });
}).call(this);
