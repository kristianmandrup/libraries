// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 07/10/14
 * Time: 23:16
 */
(function(){
  var expect, Components, log;
  expect = require('chai').expect;
  Components = require('../../../lib/component/components');
  log = console.log;
  describe('Components', function(){
    var components, cmps;
    cmps = {};
    cmps.some = ['bootme', 'foundation'];
    describe('create', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Components;
          }).to['throw'];
        });
        specify('number throws', function(){
          return expect(function(){
            return new Components(7);
          }).to['throw'];
        });
        return specify('string throws', function(){
          return expect(function(){
            return new Components('x');
          }).to['throw'];
        });
      });
      return context('valid', function(){
        specify('empty list ok', function(){
          return expect(function(){
            return new Components([]);
          }).to.not['throw'];
        });
        return specify('list ok', function(){
          return expect(function(){
            return new Components(['blip']);
          }).to.not['throw'];
        });
      });
    });
    return describe('valid components', function(){
      var components, cmp;
      beforeEach(function(){
        components = new Components(cmps.some);
        return cmp = 'strapper';
      });
      xdescribe('component(name)', function(){
        return specify('must be a Component', function(){
          return expect(components.component('strapper')).to.be.an.instanceOf(Component);
        });
      });
      describe('index(name)', function(){
        return specify('strapper not yet there', function(){
          return expect(components.index(cmp)).to.equal(-1);
        });
      });
      describe('add-one(name)', function(){
        specify('adds it', function(){
          return expect(components.addOne(cmp).list).to.include(cmp);
        });
        return describe('index(name)', function(){
          return specify('strapper is there', function(){
            return expect(components.index(cmp)).to.eql(2);
          });
        });
      });
      describe('has(name)', function(){
        return specify('strapper is there', function(){
          return expect(components.has(cmp)).to.be['true'];
        });
      });
      return describe('remove-one(name)', function(){
        return specify('removes it', function(){
          return expect(components.removeOne(cmp).list).to.not.include(cmp);
        });
      });
    });
  });
}).call(this);
