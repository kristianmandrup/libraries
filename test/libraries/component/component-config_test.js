// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 10/10/14
 * Time: 21:08
 */
(function(){
  var expect, Config, log;
  expect = require('chai').expect;
  Config = require('../../../lib/component/component-config');
  log = console.log;
  describe('ComponentConfig', function(){
    var config, name;
    before(function(){
      return name = 'bootstrap';
    });
    describe('create', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Config;
          }).to['throw'];
        });
        specify('bad nam throws', function(){
          return expect(function(){
            return new Config(7);
          }).to['throw'];
        });
        specify('a name is ok', function(){
          return expect(function(){
            return new Config('x');
          }).to.not['throw'];
        });
        return specify('obj throws', function(){
          return expect(function(){
            return new Config({
              libs: 'x'
            }, 'blip');
          }).to['throw'];
        });
      });
      return context('valid', function(){
        return specify('allow empty obj', function(){
          return expect(function(){
            return new Config(name, name);
          }).to.not['throw'];
        });
      });
    });
    return describe('valid config', function(){
      beforeEach(function(){
        return config = new Config(name, './xlibs/components');
      });
      describe('config', function(){
        return specify('has name set', function(){
          return expect(config.name).to.equal(name);
        });
      });
      describe('valid-config', function(){
        specify('any object is valid', function(){
          return expect(config.validConfig({})).to.eql({});
        });
        return specify('any non-object is invalid', function(){
          return expect(function(){
            return config.validConfig('x');
          }).to['throw'];
        });
      });
      return describe('loadIt', function(){
        return context('from local config', function(){
          return specify('loads config from registry', function(){
            return expect(config.loadIt().dir).to.eql('dist');
          });
        });
      });
    });
  });
}).call(this);
