// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 06/10/14
 * Time: 14:38
 */
(function(){
  var expect, Container, log;
  expect = require('chai').expect;
  Container = require('../../lib/config/container');
  log = console.log;
  describe('Configurator', function(){
    var container, conf;
    conf = {};
    conf.bootstrap = {
      dir: 'dist',
      scripts: {
        files: ['js/bootstrap.js']
      }
    };
    describe('create', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Container;
          }).to['throw'];
        });
        specify('bad nam throws', function(){
          return expect(function(){
            return new Container(7);
          }).to['throw'];
        });
        return specify('non-existing file', function(){
          return expect(function(){
            return new Container('x');
          }).to.not['throw'];
        });
      });
      return context('valid', function(){
        specify('obj is ok', function(){
          return expect(function(){
            return new Container({
              libs: 'x'
            });
          }).to.not['throw'];
        });
        return specify('allow empty obj', function(){
          return expect(function(){
            return new Container({});
          }).to.not['throw'];
        });
      });
    });
    return describe('valid container', function(){
      beforeEach(function(){
        return container = new Container;
      });
      describe('components', function(){
        specify('not empty', function(){
          return expect(configurator.part('bower').components).to.not.be.empty;
        });
        return specify('includes boostrap', function(){
          return expect(configurator.part('bower').components).to.include("boostrap");
        });
      });
      describe('libs', function(){
        specify('not empty', function(){
          return expect(configurator.part('bower').libs).to.not.be.empty;
        });
        return specify('has ember-validations', function(){
          return expect(configurator.part('bower').libs['ember-validations']).to.eql("dist/ember-validations");
        });
      });
      return describe('cmps', function(){
        return specify('an instance', function(){
          return expect(configurator.cmps()).to.not.eql(void 8);
        });
      });
    });
  });
}).call(this);
