// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 12/10/14
 * Time: 10:23
 */
(function(){
  var expect, Containers, Container, log;
  expect = require('chai').expect;
  Containers = require('../../../lib/config/containers');
  Container = require('../../../lib/config/container');
  log = console.log;
  describe('Containers', function(){
    var containers, conf;
    conf = {
      bower: {
        libs: {
          datepicker: "blip",
          'ember-validations': "dist/ember-validations.js"
        },
        components: ['bootstrap']
      },
      vendor: {
        libs: {
          moment: 'momentjs.js'
        }
      }
    };
    describe('create', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Containers;
          }).to['throw'];
        });
        specify('number throws', function(){
          return expect(function(){
            return new Containers(7);
          }).to['throw'];
        });
        specify('string throws', function(){
          return expect(function(){
            return new Containers('x');
          }).to['throw'];
        });
        specify('single obj throws', function(){
          return expect(function(){
            return new Containers({});
          }).to['throw'];
        });
        return specify('obj and string throws', function(){
          return expect(function(){
            return new Containers({}, 'x');
          }).to['throw'];
        });
      });
      return context('valid', function(){
        return specify('obj and obj is ok', function(){
          return expect(function(){
            return new Containers({
              libs: 'x'
            }, {});
          }).to.not['throw'];
        });
      });
    });
    return describe('valid containers', function(){
      beforeEach(function(){
        return containers = new Containers(conf, {});
      });
      describe('container(name)', function(){
        specify('bower is not empty', function(){
          return expect(containers.container('bower')).to.not.be['void'];
        });
        return specify('vendor has no libs', function(){
          return expect(containers.container('vendor').libs()).to.eql({
            "moment": "momentjs.js"
          });
        });
      });
      describe('all', function(){
        return specify('list of Container', function(){
          return expect(containers.all()[0]).to.be.an.instanceOf(Container);
        });
      });
      describe('install', function(){
        return specify('installs missing', function(){
          return expect(containers.install()).to.not.be['void'];
        });
      });
      return describe('build', function(){
        return specify('builds', function(){
          return expect(containers.build()).to.not.be['void'];
        });
      });
    });
  });
}).call(this);
