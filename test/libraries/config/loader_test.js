// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 10/10/14
 * Time: 21:08
 */
(function(){
  var expect, Loader, log;
  expect = require('chai').expect;
  Loader = require('../../../lib/config/loader');
  log = console.log;
  describe('Loader', function(){
    var loader, name;
    before(function(){
      return name = 'bootstrap';
    });
    describe('create', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Loader;
          }).to['throw'];
        });
        specify('bad nam throws', function(){
          return expect(function(){
            return new Loader(7);
          }).to['throw'];
        });
        specify('a name is ok', function(){
          return expect(function(){
            return new Loader('x');
          }).to.not['throw'];
        });
        return specify('obj throws', function(){
          return expect(function(){
            return new Loader({
              libs: 'x'
            }, 'blip');
          }).to['throw'];
        });
      });
      return context('valid', function(){
        return specify('allow empty obj', function(){
          return expect(function(){
            return new Loader(name, name);
          }).to.not['throw'];
        });
      });
    });
    return describe('valid loader', function(){
      beforeEach(function(){
        return loader = new Loader(name, './xlibs/components');
      });
      describe('loader', function(){
        return specify('has name set', function(){
          return expect(loader.name).to.equal(name);
        });
      });
      describe('valid-config', function(){
        specify('any object is valid', function(){
          return expect(loader.validConfig({})).to.eql({});
        });
        return specify('any non-object is invalid', function(){
          return expect(function(){
            return loader.validConfig('x');
          }).to['throw'];
        });
      });
      describe('component-file', function(){
        specify('is combined into a local repo file path', function(){
          return expect(loader.componentFile()).to.eql('./xlibs/components/bootstrap.json');
        });
        return specify('blip is non-existing file path', function(){
          return expect(loader.componentFile('blip')).to.eql('./xlibs/components/blip.json');
        });
      });
      describe('has-local', function(){
        return specify('bootstrap is in local repo', function(){
          return expect(loader.hasLocal()).to.be['true'];
        });
      });
      describe('has-local(name)', function(){
        specify('bootstrap is in local repo', function(){
          return expect(loader.hasLocal('bootstrap')).to.be['true'];
        });
        return specify('blip is not in local repo', function(){
          return expect(loader.hasLocal('blip')).to.be['false'];
        });
      });
      describe('registry-file', function(){
        return specify('is combined into a registry file path', function(){
          return expect(loader.registryFile()).to.eql('./xlibs/registry/bootstrap.json');
        });
      });
      describe('load', function(){
        context('registry config', function(){
          return specify('loads config from registry', function(){
            return expect(function(){
              return loader.load('./xlibs/registry/bootstrap.json');
            }).to['throw'];
          });
        });
        return context('local config', function(){
          return specify('loads config from local repo', function(){
            return expect(loader.load('./xlibs/components/bootstrap.json').dir).to.eql('dist');
          });
        });
      });
      return describe('loadIt', function(){
        return context('from local config', function(){
          return specify('loads config from registry', function(){
            return expect(loader.loadIt().dir).to.eql('dist');
          });
        });
      });
    });
  });
}).call(this);
