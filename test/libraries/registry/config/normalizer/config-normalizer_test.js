// Generated by LiveScript 1.2.0
(function(){
  var expect, Normalizer, PathNormalizer, FileNormalizer, log;
  expect = require('chai').expect;
  Normalizer = require('../../../../../lib/registry/config/normalizer/config-normalizer');
  PathNormalizer = require('../../../../../lib/registry/config/normalizer/path-normalizer');
  FileNormalizer = require('../../../../../lib/registry/config/normalizer/file-normalizer');
  log = console.log;
  describe('ConfigNormalizer', function(){
    describe('create(@config)', function(){
      describe('invalid', function(){
        return specify('no args invalid', function(){
          return expect(function(){
            return new Normalizer.to['throw'];
          });
        });
      });
      return describe('valid', function(){
        return specify('name arg is valid', function(){
          return expect(function(){
            return new Normalizer('x');
          }).to['throw'];
        });
      });
    });
    return context('valid instance', function(){
      var normalizer, config;
      beforeEach(function(){
        config = {
          files: ['dist/js/bootstrap.js', 'dist/css/bootstrap.css']
        };
        return normalizer = new Normalizer(config);
      });
      describe('normalize', function(){
        return specify('normalizes config', function(){
          return expect(normalizer.normalize()).to.eql({});
        });
      });
      describe('file-normalizer', function(){
        return specify('creates one', function(){
          return expect(normalizer.fileNormalizer()).to.be.an.instanceOf(FileNormalizer);
        });
      });
      describe('path-normalizer', function(){
        return specify('creates one', function(){
          return expect(normalizer.pathNormalizer()).to.be.an.instanceOf(PathNormalizer);
        });
      });
      return describe.only('normalized', function(){
        before(function(){
          config = {
            files: ['dist/js/bootstrap.js', 'dist/css/bootstrap.css']
          };
          normalizer = new Normalizer(config);
          return normalizer.normalize();
        });
        specify('root is dist', function(){
          return expect(normalizer.normalized.dir).to.equal('dist');
        });
        specify('scripts normalized to have js as relative root dir', function(){
          return expect(normalizer.normalized.scripts).to.eql({
            dir: 'js',
            files: ['bootstrap.js']
          });
        });
        return specify('styles is normalized to have css as relative root dir', function(){
          return expect(normalizer.normalized.styles).to.eql({
            dir: 'css',
            files: ['bootstrap.css']
          });
        });
      });
    });
  });
}).call(this);
