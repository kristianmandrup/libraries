// Generated by LiveScript 1.2.0
(function(){
  var PathNormalizer, FileShortener, DirShortener, expect, log;
  PathNormalizer = require('../../../../../lib/registry/config/normalizer/path-normalizer');
  FileShortener = require('../../../../../lib/registry/config/normalizer/file-shortener');
  DirShortener = require('../../../../../lib/registry/config/normalizer/dir-shortener');
  expect = require('chai').expect;
  log = console.log;
  describe('PathNormalizer', function(){
    var config;
    config = {};
    config.simple = {
      main: {
        files: ['dist/js/bootstrap.js']
      },
      scripts: {
        files: ['dist/js/bootstrap.js']
      },
      styles: {
        files: ['dist/css/bootstrap.css']
      }
    };
    config.xyz = {
      scripts: {
        files: ['x/y/z.js']
      }
    };
    describe('create(@config)', function(){});
    return context('instance', function(){
      var normalizer;
      before(function(){
        return normalizer = new PathNormalizer(config.simple, ['dist/js/bootstrap.js', 'dist/js/bootstrap.js', 'dist/css/bootstrap.css']);
      });
      describe('normalize', function(){
        var config;
        before(function(){
          return config = normalizer.normalize();
        });
        specify('sets root dir to dist', function(){
          return expect(config.dir).to.eql("dist");
        });
        specify('shortens main files to file name', function(){
          return expect(config.main.files[0]).to.eql("bootstrap.js");
        });
        specify('main dir = js', function(){
          return expect(config.main.dir).to.eql("js");
        });
        specify('styles dir = css', function(){
          return expect(config.styles.dir).to.eql('css');
        });
        specify('scripts dir = js', function(){
          return expect(config.styles.dir).to.eql('css');
        });
        return specify('scripts dir = js', function(){
          return expect(config.styles.files[0]).to.eql('bootstrap.css');
        });
      });
      describe.only('normalize xyz', function(){
        before(function(){
          return normalizer = new PathNormalizer(config.xyz, ['x/y/z.js']);
        });
        describe.only('set-root', function(){
          return specify('is void', function(){
            return expect(normalizer.setRoot().root).to.eql(void 8);
          });
        });
        describe('config-keys', function(){
          return specify('keys', function(){
            return expect(normalizer.configKeys()).to.eql(['scripts']);
          });
        });
        describe('dirs', function(){
          return specify('is x,y', function(){
            return expect(normalizer.dirs()).to.eql([void 8]);
          });
        });
        describe('normalize-key-dirs', function(){
          return specify('normalizes dirs', function(){
            return expect(normalizer.normalizeKeyDirs()).to.eql([void 8]);
          });
        });
        describe('normalize-key-files', function(){
          return specify('normalizes files', function(){
            return expect(normalizer.normalizeKeyFiles()).to.eql([{
              files: ['z.js'],
              dir: 'x/y'
            }]);
          });
        });
        return describe('normalize', function(){
          return specify('normalizes', function(){
            return expect(normalizer.normalize()).to.eql({
              dir: 'x',
              scripts: {
                dir: 'y',
                files: ['z.js']
              }
            });
          });
        });
      });
      describe('file-shortener', function(){
        return specify('is a FileShortener', function(){
          return expect(normalizer.fileShortener()).to.be.an.instanceOf(FileShortener);
        });
      });
      return describe('dir-shortener', function(){
        return specify('is a DirShortener', function(){
          return expect(normalizer.dirShortener()).to.be.an.instanceOf(DirShortener);
        });
      });
    });
  });
}).call(this);
