// Generated by LiveScript 1.2.0
(function(){
  var PathNormalizer, PathShortener, expect, log;
  PathNormalizer = require('../../../../../lib/registry/config/normalizer/path-normalizer');
  PathShortener = require('../../../../../lib/registry/config/normalizer/path-shortener');
  expect = require('chai').expect;
  log = console.log;
  describe('PathNormalizer', function(){
    var config;
    config = {};
    config.simple = {
      main: {
        files: ['dist/js/bootstrap.js']
      },
      scripts: {
        files: ['dist/js/bootstrap.js']
      },
      styles: {
        files: ['dist/css/bootstrap.css']
      }
    };
    describe('create(@config)', function(){});
    return context('instance', function(){
      var normalizer;
      before(function(){
        return normalizer = new PathNormalizer(config.simple, ['dist/js/bootstrap.js', 'dist/js/bootstrap.js', 'dist/css/bootstrap.css']);
      });
      describe('normalize', function(){
        var config;
        before(function(){
          return config = normalizer.normalize();
        });
        specify('sets root dir to dist', function(){
          return expect(config.dir).to.eql("dist");
        });
        specify('shortens main files to file name', function(){
          return expect(config.main.files[0]).to.eql("bootstrap.js");
        });
        specify('main dir = js', function(){
          return expect(config.main.dir).to.eql("js");
        });
        specify('styles dir = css', function(){
          return expect(config.styles.dir).to.eql('css');
        });
        specify('scripts dir = js', function(){
          return expect(config.styles.dir).to.eql('css');
        });
        return specify('scripts dir = js', function(){
          return expect(config.styles.files[0]).to.eql('bootstrap.css');
        });
      });
      return describe('path-shortener', function(){
        return specify('is a PathShortener', function(){
          return expect(normalizer.pathShortener()).to.be.an.instanceOf(PathShortener);
        });
      });
    });
  });
}).call(this);
