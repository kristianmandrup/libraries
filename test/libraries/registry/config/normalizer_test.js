// Generated by LiveScript 1.2.0
(function(){
  var expect, log, util, inspect, Normalizer, ConfigNormalizer;
  expect = require('chai').expect;
  log = console.log;
  util = require('util');
  inspect = function(obj){
    return log(util.inspect(obj));
  };
  Normalizer = require('../../../../lib/registry/config/normalizer');
  ConfigNormalizer = require('../../../../lib/registry/config/normalizer/config-normalizer');
  describe('Normalizer', function(){
    return describe('create(@config, @options = {})', function(){
      context('invalid', function(){
        specify('no args throws', function(){
          return expect(function(){
            return new Normalizer.to['throw'];
          });
        });
        return specify('string args throws', function(){
          return expect(function(){
            return new Normalizer('x').to['throw'];
          });
        });
      });
      context('valid', function(){
        return specify('config obj ok', function(){
          return expect(function(){
            return new Normalizer({}, {
              type: 'component'
            }).to.not['throw'];
          });
        });
      });
      describe('should-normalize', function(){
        var normalizer, config;
        context('no dir', function(){
          beforeEach(function(){
            return normalizer = new Normalizer({
              files: ['x/y.js']
            }, {
              type: 'component'
            });
          });
          return specify('it should', function(){
            return expect(normalizer.shouldNormalize()).to.be['true'];
          });
        });
        return context('has a dir', function(){
          beforeEach(function(){
            return normalizer = new Normalizer({
              dir: 'x',
              scripts: ['y.js']
            }, {
              type: 'component'
            });
          });
          return specify('it should not', function(){
            return expect(normalizer.shouldNormalize()).to.be['false'];
          });
        });
      });
      return context('instance', function(){
        var normalizer, config;
        beforeEach(function(){
          config = {
            files: ['x/y/z.js']
          };
          return normalizer = new Normalizer(config, {
            type: 'component'
          });
        });
        describe('config-normalizer', function(){
          return specify('creates one', function(){
            return expect(normalizer.configNormalizer()).to.be.an.instanceOf(ConfigNormalizer);
          });
        });
        describe('keys', function(){
          return specify('has one', function(){
            return expect(normalizer.keys()).to.eql(['files']);
          });
        });
        return describe('normalize', function(){
          return specify('has one', function(){
            return expect(normalizer.normalize()).to.eql({
              dir: 'x',
              scripts: {
                dir: 'y',
                files: ['z.js']
              }
            });
          });
        });
      });
    });
  });
}).call(this);
