// Generated by LiveScript 1.2.0
(function(){
  var chai, expect, chaiAsPromised, util, Adaptor, Translator, log, logx;
  chai = require('chai');
  expect = chai.expect;
  chaiAsPromised = require("chai-as-promised");
  chai.use(chaiAsPromised);
  util = require('util');
  Adaptor = require('../../../../../lib/registry/config/package/bower/local-bower');
  Translator = require('../../../../../lib/registry/config/package/bower/github-repo-translator');
  log = console.log;
  logx = function(msg){
    return console.log(util.inspect(msg));
  };
  describe('LocalBowerAdapter', function(){
    describe('create(@name, @options = {})', function(){
      describe('invalid', function(){
        return specify('throws', function(){
          return expect(function(){
            return new Adaptor.to['throw'];
          });
        });
      });
      return describe('valid', function(){
        return specify('string arg - ok', function(){
          return expect(function(){
            return new Adaptor('x').to.not['throw'];
          });
        });
      });
    });
    return context('instance', function(){
      var adaptor;
      beforeEach(function(){
        return adaptor = new Adaptor('bootstrap');
      });
      describe('adapt', function(){
        return specify('get obj with 7 files', function(){
          return adaptor.adapt().then(function(obj){
            return expect(obj.files.length).to.eql(7);
          });
        });
      });
      describe('files', function(){
        return specify('has 7 files', function(){
          return adaptor.files().then(function(files){
            return expect(files.length).to.eql(7);
          });
        });
      });
      describe('has-main', function(){
        return specify('gets bower.json body', function(){
          return adaptor.hasMain().then(function(has){
            return expect(has).to.be['true'];
          });
        });
      });
      describe('main-files', function(){
        return specify('gets bower.json body', function(){
          return adaptor.mainFiles().then(function(files){
            return expect(files).to.include("dist/js/bootstrap.js");
          });
        });
      });
      describe('bower-json', function(){
        return specify('gets bower.json body', function(){
          return adaptor.bowerJson().then(function(json){
            return expect(json.name).to.eql('bootstrap');
          });
        });
      });
      describe('retrieve', function(){
        return specify('gets bower.json body', function(){
          return expect(adaptor.retrieve()).to.eventually.match(/getbootstrap/);
        });
      });
      describe('retrieve-body', function(){
        var bow;
        beforeEach(function(){
          return bow = 'https://raw.githubusercontent.com/twbs/bootstrap/master/bower.json';
        });
        return specify('gets bower.json body', function(){
          return expect(adaptor.retrieveBody(bow)).to.eventually.match(/getbootstrap/);
        });
      });
      describe('repo-translator', function(){
        return specify('is a Translator', function(){
          return expect(adaptor.repoTranslator('x')).to.be.an.instanceOf(Translator);
        });
      });
      describe('repo-uri', function(){
        return specify('finds first matching repo uri', function(){
          return expect(adaptor.repoUri()).to.eventually.eql("https://raw.githubusercontent.com/twbs/bootstrap/master/bower.json");
        });
      });
      describe('repo', function(){
        return specify('finds first matching repo uri', function(){
          return expect(adaptor.repo()).to.eventually.eql("git://github.com/twbs/bootstrap.git");
        });
      });
      describe('find-repos', function(){
        return specify('finds bower repo uri', function(){
          return adaptor.findRepos(function(repos){
            return expect(repos).to.eql(["git://github.com/twbs/bootstrap.git"]);
          });
        });
      });
      return describe('find(cb)', function(){
        return specify('finds bower repo uri', function(){
          return expect(adaptor.find().promise).to.eventually.eql({
            type: 'alias',
            url: 'git://github.com/twbs/bootstrap.git'
          });
        });
      });
    });
  });
}).call(this);
