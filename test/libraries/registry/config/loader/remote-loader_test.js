// Generated by LiveScript 1.2.0
(function(){
  var expect, ConfigLoader, Registry, log;
  expect = require('chai').expect;
  ConfigLoader = require('../../../../lib/registry/config-loader/remote');
  Registry = require('../../../../lib/registry/registry');
  log = console.log;
  describe('LocalConfigLoader', function(){
    var loader, config, component, remoteLocation;
    config = {
      local: './xlibs/components/bootstrap.json',
      remote: './xlibs/registry/bootstrap.json'
    };
    component = {
      remote: 'foundation',
      local: 'bootstrap'
    };
    remoteLocation = function(name){
      return './xlibs/registry/' + name + '.json';
    };
    describe('create', function(){
      context('invalid', function(){
        return specify('bad nam throws', function(){
          return expect(function(){
            return new ConfigLoader(7);
          }).to['throw'];
        });
      });
      return context('valid', function(){
        specify('name string is ok', function(){
          return expect(function(){
            return new ConfigLoader('x');
          }).to.not['throw'];
        });
        return specify('name, path string ok', function(){
          return expect(function(){
            return new ConfigLoader('x', 'y');
          }).to.not['throw'];
        });
      });
    });
    return describe('valid instance', function(){
      before(function(){
        return loader = new ConfigLoader('foundation');
      });
      describe('load-config', function(){
        return specify('loads config', function(){
          return expect(loader.loadConfig().dir).to.eql('dist');
        });
      });
      describe('has-local', function(){
        return specify('bootstrap is in local repo', function(){
          return expect(loader.hasConfig()).to.be['true'];
        });
      });
      describe('has-local(name)', function(){
        specify('bootstrap is in local repo', function(){
          return expect(loader.hasConfig('bootstrap')).to.be['true'];
        });
        return specify('mak is not in local repo', function(){
          return expect(loader.hasConfig('mak')).to.be['false'];
        });
      });
      describe('config-file', function(){
        specify('is combined into a local repo file path', function(){
          return expect(loader.configFile()).to.eql(remoteLocation('foundation'));
        });
        return specify('blip is non-existing file path', function(){
          return expect(loader.configFile('blip')).to.eql(remoteLocation('blip'));
        });
      });
      return describe('registry', function(){
        return specify('is a Registry', function(){
          return expect(loader.registry()).to.be.an.instanceOf(Registry);
        });
      });
    });
  });
}).call(this);
