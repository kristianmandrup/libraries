// Generated by LiveScript 1.2.0
(function(){
  var expect, ConfigLoader, CompositeLoader, Normalizer, log;
  expect = require('chai').expect;
  ConfigLoader = require('../../../../../lib/registry/config/loader/local-loader');
  CompositeLoader = require('../../../../../lib/registry/config/loader/local/composite-loader');
  Normalizer = require('../../../../../lib/registry/config/normalizer');
  log = console.log;
  describe('LocalConfigLoader', function(){
    var config;
    config = {
      files: ['dist/js/bootstrap.json']
    };
    describe('create', function(){
      context('invalid', function(){
        return specify('bad nam throws', function(){
          return expect(function(){
            return new ConfigLoader(7);
          }).to['throw'];
        });
      });
      return context('valid', function(){
        specify('name string is ok', function(){
          return expect(function(){
            return new ConfigLoader('x');
          }).to.not['throw'];
        });
        return specify('name, path string ok', function(){
          return expect(function(){
            return new ConfigLoader('x', 'y');
          }).to.not['throw'];
        });
      });
    });
    return describe('valid instance', function(){
      var loader;
      beforeEach(function(){
        return loader = new ConfigLoader('bootstrap');
      });
      describe('load-config', function(){
        return specify('loads config', function(){
          return expect(loader.configFile().dir).to.eql('dist');
        });
      });
      describe('has-local', function(){
        return specify('bootstrap is in local repo', function(){
          return expect(loader.hasConfig()).to.be['true'];
        });
      });
      describe('has-local(name)', function(){
        specify('bootstrap is in local repo', function(){
          return expect(loader.hasConfig('bootstrap')).to.be['true'];
        });
        return specify('blip is not in local repo', function(){
          return expect(loader.hasConfig('blip')).to.be['false'];
        });
      });
      describe('config-file', function(){
        specify('is combined into a local repo file path', function(){
          return expect(loader.configFile()).to.eql('./xlibs/components/bootstrap.json');
        });
        return specify('blip is non-existing file path', function(){
          return expect(loader.configFile('blip')).to.eql('./xlibs/components/blip.json');
        });
      });
      describe('load', function(){
        return specify('loads config from local repo', function(){
          return expect(loader.load('./xlibs/components/bootstrap.json').dir).to.eql('dist');
        });
      });
      describe('selected-loader', function(){
        return specify('selects a loader', function(){
          return expect(loader.selectedLoader()).to.eql(CompositeLoader);
        });
      });
      describe('loaders', function(){
        return specify('selects a loader', function(){
          return expect(Object.keys(loader.loaders())).to.include('composite');
        });
      });
      describe('normalize', function(){
        return specify('normalizes a loader', function(){
          return expect(loader.normalize(config)).to.include('composite');
        });
      });
      describe('normalizer', function(){
        return specify('normalizes a loader', function(){
          return expect(loader.normalizer(config)).to.be.an.instanceOf(Normalizer);
        });
      });
      describe('loaded-config', function(){
        return specify('is an adapted config', function(){
          return expect(loader.loadedConfig()).to.eql({});
        });
      });
      return describe('adapter', function(){
        return specify('is an Adapter', function(){
          return expect(loader.loader()).to.be.an.instanceOf(CompositeLoader);
        });
      });
    });
  });
}).call(this);
