// Generated by LiveScript 1.2.0
(function(){
  var expect, Adapter, Installer, log;
  expect = require('chai').expect;
  Adapter = require('../../../../../lib/registry/adapter/remote/uri-adapter');
  Installer = require('../../../../../lib/registry/config/installer');
  log = console.log;
  describe('UriAdapter', function(){
    var adapter;
    describe('create', function(){
      context('invalid', function(){
        specify('number throws', function(){
          return expect(function(){
            return new Adapter(7);
          }).to['throw'];
        });
        return specify('string throws', function(){
          return expect(function(){
            return new Adapter('./xlibs/config.json');
          }).throws;
        });
      });
      return context('valid', function(){
        specify('no args ok', function(){
          return expect(function(){
            return new Adapter;
          }).to['throw'];
        });
        return specify('empty obj ok', function(){
          return expect(function(){
            return new Adapter({});
          }).to.not['throw'];
        });
      });
    });
    return describe('valid instance', function(){
      var uri;
      before(function(){
        uri = "https://raw.githubusercontent.com/kristianmandrup/libraries/master/registry";
        return adapter = new Adapter;
      });
      describe('registry-uri', function(){
        return specify('is path', function(){
          return expect(adapter.registryUri).to.eql(uri);
        });
      });
      describe('local-registry-path', function(){
        return specify('is path', function(){
          return expect(adapter.localRegistryPath).to.eql('./xlibs/components');
        });
      });
      describe('installer', function(){
        return specify('is path', function(){
          return expect(adapter.installer()).to.be.an.instanceOf(Installer);
        });
      });
      describe('registry-uri-for', function(){
        return specify('bower returns remote file', function(){
          return expect(adapter.registryLibsUri()).to.eql(uri + "/bower-libs.json");
        });
      });
      describe('index-content', function(){
        return specify('is path', function(){
          return expect(adapter.indexContent()).to.match(/ember-i18n/);
        });
      });
      describe('index', function(){
        return specify('is json', function(){
          return expect(adapter.index()["ember-i18n"].categories).to.include('i18n');
        });
      });
      return describe('list', function(){
        return specify('is json', function(){
          return expect(adapter.list()).to.include("ember-i18n");
        });
      });
    });
  });
}).call(this);
