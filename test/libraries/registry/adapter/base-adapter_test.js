// Generated by LiveScript 1.2.0
(function(){
  var expect, log, BaseAdapter, Installer;
  expect = require('chai').expect;
  log = console.log;
  BaseAdapter = require('../../../../lib/registry/adapter/base-adapter');
  Installer = require('../../../../lib/registry/config/installer');
  describe('BaseAdapter', function(){
    var adapter;
    describe('create', function(){
      context('invalid', function(){
        specify('number throws', function(){
          return expect(function(){
            return new BaseAdapter(7);
          }).to['throw'];
        });
        specify('string throws', function(){
          return expect(function(){
            return new BaseAdapter('./xlibs/config.json');
          }).throws;
        });
        return specify('no args fails', function(){
          return expect(function(){
            return new BaseAdapter;
          }).to['throw'];
        });
      });
      return context('valid', function(){
        return specify('empty obj ok', function(){
          return expect(function(){
            return new BaseAdapter({});
          }).to.not['throw'];
        });
      });
    });
    return describe('valid instance', function(){
      before(function(){
        return adapter = new BaseAdapter({
          registry: 'x',
          name: 'bootstrap'
        });
      });
      describe('registry-uri', function(){
        return specify('is path', function(){
          return expect(adapter.registryUri).to.eql("x");
        });
      });
      describe('local-registry-path', function(){
        return specify('is path', function(){
          return expect(adapter.localRegistryPath).to.eql('./xlibs/components');
        });
      });
      describe('installer', function(){
        return specify('is path', function(){
          return expect(adapter.installer()).to.be.an.instanceOf(Installer);
        });
      });
      return describe('enrich-and-normalize', function(){
        return specify('enriches and normalizes', function(){
          return expect(function(){
            return adapter.enrichAndNormalize('bootstrap').to['throw'];
          });
        });
      });
    });
  });
}).call(this);
