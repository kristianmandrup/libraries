// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 12/10/14
 * Time: 12:45
 */
(function(){
  var expect, ConfigLoader, log;
  expect = require('chai').expect;
  ConfigLoader = require('../../../../lib/registry/config-loader/local');
  log = console.log;
  describe('LocalConfigLoader', function(){
    var loader, config;
    config = {
      local: './xlibs/components/bootstrap.json',
      remote: './xlibs/registry/bootstrap.json'
    };
    describe('create', function(){
      context('invalid', function(){
        return specify('bad nam throws', function(){
          return expect(function(){
            return new ConfigLoader(7);
          }).to['throw'];
        });
      });
      return context('valid', function(){
        specify('name string is ok', function(){
          return expect(function(){
            return new ConfigLoader('x');
          }).to.not['throw'];
        });
        return specify('name, path string ok', function(){
          return expect(function(){
            return new ConfigLoader('x', 'y');
          }).to.not['throw'];
        });
      });
    });
    return describe('valid instance', function(){
      before(function(){
        return loader = new ConfigLoader('bootstrap');
      });
      describe('load-config', function(){
        return specify('loads config', function(){
          return expect(loader.loadConfig().dir).to.eql('dist');
        });
      });
      describe('has-local', function(){
        return specify('bootstrap is in local repo', function(){
          return expect(loader.hasConfig()).to.be['true'];
        });
      });
      describe('has-local(name)', function(){
        specify('bootstrap is in local repo', function(){
          return expect(loader.hasConfig('bootstrap')).to.be['true'];
        });
        return specify('blip is not in local repo', function(){
          return expect(loader.hasConfig('blip')).to.be['false'];
        });
      });
      describe('config-file', function(){
        specify('is combined into a local repo file path', function(){
          return expect(loader.configFile()).to.eql('./xlibs/components/bootstrap.json');
        });
        return specify('blip is non-existing file path', function(){
          return expect(loader.configFile('blip')).to.eql('./xlibs/components/blip.json');
        });
      });
      return describe('load', function(){
        return specify('loads config from local repo', function(){
          return expect(loader.load('./xlibs/components/bootstrap.json').dir).to.eql('dist');
        });
      });
    });
  });
}).call(this);
