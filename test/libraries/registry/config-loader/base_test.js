// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 12/10/14
 * Time: 12:46
 */
(function(){
  var expect, ConfigLoader, log;
  expect = require('chai').expect;
  ConfigLoader = require('../../../../lib/registry/config-loader/base');
  log = console.log;
  describe('BaseConfigLoader', function(){
    var loader, config;
    config = {
      local: './xlibs/components/bootstrap.json',
      remote: './xlibs/registry/bootstrap.json'
    };
    describe('create', function(){
      context('invalid', function(){
        return specify('bad nam throws', function(){
          return expect(function(){
            return new ConfigLoader(7);
          }).to['throw'];
        });
      });
      return context('valid', function(){
        specify('name string is ok', function(){
          return expect(function(){
            return new ConfigLoader('x');
          }).to.not['throw'];
        });
        return specify('name, path string ok', function(){
          return expect(function(){
            return new ConfigLoader('x', 'y');
          }).to.not['throw'];
        });
      });
    });
    return describe('valid instance', function(){
      before(function(){
        loader = new ConfigLoader('bootstrap');
        loader.configFile = function(){
          return config.local;
        };
        return loader.hasConfig = function(){
          return true;
        };
      });
      describe('load-config', function(){
        return specify('loads config', function(){
          return expect(loader.loadConfig().dir).to.eql('dist');
        });
      });
      return describe('load', function(){
        specify('loads json from local', function(){
          return expect(function(){
            return config.load(config.local);
          }).to.not['throw'];
        });
        return specify('no json to load - fails', function(){
          return expect(function(){
            return config.load(config.remote);
          }).to['throw'];
        });
      });
    });
  });
}).call(this);
