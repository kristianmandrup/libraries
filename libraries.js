// Generated by LiveScript 1.2.0
(function(){
  var Importer, Adder, Remover, Libraries, slice$ = [].slice;
  Importer = require('./importer');
  Adder = require('./adder');
  Remover = require('./remover');
  module.exports = Libraries = (function(){
    Libraries.displayName = 'Libraries';
    var prototype = Libraries.prototype, constructor = Libraries;
    function Libraries(options){
      this.options = options != null
        ? options
        : {};
      this.importer();
      this;
    }
    prototype.importer = function(){
      return this.importer = new Importer(this.options.app, this.options);
    };
    prototype.importAll = function(){
      return this.importer.importAll();
    };
    prototype.addLibs = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).addLibs.apply(ref$, args);
    };
    prototype.removeLibs = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).removeLibs.apply(ref$, args);
    };
    prototype.addLib = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).addLib.apply(ref$, args);
    };
    prototype.removeLib = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).removeLib.apply(ref$, args);
    };
    prototype.addRemaps = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).addRemaps.apply(ref$, args);
    };
    prototype.removeRemaps = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).removeRemaps.apply(ref$, args);
    };
    prototype.addRemap = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).addRemap.apply(ref$, args);
    };
    prototype.removeRemap = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).removeRemap.apply(ref$, args);
    };
    prototype.print = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).print.apply(ref$, args);
    };
    prototype.save = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).save.apply(ref$, args);
    };
    prototype.load = function(){
      var args, ref$;
      args = slice$.call(arguments);
      return (ref$ = this.importer).load.apply(ref$, args);
    };
    return Libraries;
  }());
}).call(this);
