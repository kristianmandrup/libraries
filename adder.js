// Generated by LiveScript 1.2.0
(function(){
  var fs, Reader, Adder, toString$ = {}.toString;
  fs = require('fs');
  Reader = require('./reader');
  module.exports = Adder = (function(){
    Adder.displayName = 'Adder';
    var prototype = Adder.prototype, constructor = Adder;
    importAll$(prototype, arguments[0]);
    function Adder(options){
      this.options = options != null
        ? options
        : {};
      this.file = this.options.file || './imports/libraries.json';
      this.libs();
    }
    prototype.init = function(key){
      var ref$;
      return (ref$ = this.libs)[key] || (ref$[key] = {});
    };
    prototype.save = function(file){
      file || (file = this.file);
      return fs.writeFileSync(file, JSON.stringify(this.libs, null, '  '));
    };
    prototype.addLibs = function(key, names){
      var obj, i$, ref$, len$, k;
      if (toString$.call(key).slice(8, -1) === 'Object' && Object.keys(key).length > 0) {
        obj = key;
        for (i$ = 0, len$ = (ref$ = Object.keys(obj)).length; i$ < len$; ++i$) {
          k = ref$[i$];
          this.addLibs(k, obj[k]);
        }
        return this;
      }
      this.init(key);
      if (typeof names === 'string') {
        names = [names];
      }
      if (toString$.call(names).slice(8, -1) !== 'Array') {
        throw new Error("lib(s) to add must be a String or Object");
      }
      if (!(names.length > 0)) {
        return;
      }
      this.libs[key].libs = (this.libs[key].libs || []).concat(names);
      return this;
    };
    prototype.print = function(io){
      io == null && (io = console.log);
      return io(this.libs);
    };
    prototype.addRemaps = function(key, obj){
      var ref$, name, value;
      obj == null && (obj = {});
      this.init(key);
      if (toString$.call(obj).slice(8, -1) !== 'Object') {
        throw new Error("Remap must be an Object");
      }
      if (!(Object.keys(obj).length > 0)) {
        return;
      }
      (ref$ = this.libs[key]).remaps || (ref$.remaps = {});
      for (name in obj) {
        value = obj[name];
        this.addRemap(key, name, value);
      }
      return this;
    };
    prototype.addRemap = function(key, name, value){
      this.libs[key].remaps[name] = value;
      return this;
    };
    return Adder;
  }(Reader));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
