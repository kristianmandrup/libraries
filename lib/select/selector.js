// Generated by LiveScript 1.2.0
(function(){
  var FileIO, ListMutator, Select;
  FileIO = require('../file-io');
  ListMutator = require('../list-mutator');
  if (!String.prototype.trim) {
    String.prototype.trim = function(){
      return this.replace(/^\s+|\s+$/g, '');
    };
  }
  module.exports = Select = (function(){
    Select.displayName = 'Select';
    var prototype = Select.prototype, constructor = Select;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    function Select(options){
      this.options = options != null
        ? options
        : {};
      this.file = this.options.file || './xlibs/select';
      this.validate();
      this.read();
      this.content = this.options.select || this.content;
      this;
    }
    prototype.validate = function(){
      if (this.file && !this.exists()) {
        throw new Error("File " + this.file + " does not exist");
      }
    };
    prototype.addOne = function(name){
      if (this.has(name)) {
        return;
      }
      this.clear();
      this.lines().push(name);
      this.content = this.lines().join("\n");
      return this;
    };
    prototype.removeOne = function(name){
      this.clear();
      this._removeItem(this.content, name);
      return this;
    };
    prototype.lines = function(){
      return this._lines || (this._lines = this.content.split("\n").filter(function(x){
        return !!x;
      }).map(function(x){
        return x.trim();
      }));
    };
    prototype.clear = function(){
      return this._lines = void 8;
    };
    prototype.index = function(name){
      return this.lines().indexOf(name);
    };
    return Select;
  }(FileIO, ListMutator));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
