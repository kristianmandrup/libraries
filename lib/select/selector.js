// Generated by LiveScript 1.2.0
(function(){
  var FileIO, ListMutator, Configurator, Registry, GlobalConfig, gconf, Select;
  FileIO = require('../util/file-io');
  ListMutator = require('../util/list-mutator');
  Configurator = require('../config/configurator');
  Registry = require('../registry/registry');
  GlobalConfig = require('../global-config');
  gconf = new GlobalConfig;
  if (!String.prototype.trim) {
    String.prototype.trim = function(){
      return this.replace(/^\s+|\s+$/g, '');
    };
  }
  module.exports = Select = (function(){
    Select.displayName = 'Select';
    var prototype = Select.prototype, constructor = Select;
    importAll$(prototype, arguments[0]);
    importAll$(prototype, arguments[1]);
    function Select(options){
      this.options = options != null
        ? options
        : {};
      this.file = this.options.selectFile || this.selectedFile();
      this.validate();
      this.read();
      this.content = this.options.select || this.content;
      this;
    }
    prototype.selectedFile = function(){
      if (this.options.env) {
        return this.envFile();
      } else {
        return gconf.select().file();
      }
    };
    prototype.envFile = function(){
      return [gconf.dir, this.options.env, 'selected'].join('/');
    };
    prototype.validate = function(){
      if (this.file && !this.exists()) {
        throw new Error("File " + this.file + " does not exist");
      }
    };
    prototype.addOne = function(name){
      if (this.has(name)) {
        return false;
      }
      this.clear();
      this.lines().push(name);
      this.refresh();
      return this;
    };
    prototype.refresh = function(){
      return this.content = this.lines().join("\n");
    };
    prototype.removeOne = function(name){
      if (!this.has(name)) {
        return false;
      }
      this.clear();
      this._removeItem(this.lines(), name);
      this.refresh();
      return this;
    };
    prototype.install = function(){
      var i$, ref$, len$, name;
      this.installs = [];
      for (i$ = 0, len$ = (ref$ = this.list()).length; i$ < len$; ++i$) {
        name = ref$[i$];
        this.installed(this.registry().install(name));
      }
      return this.installs;
    };
    prototype.uninstall = function(name){
      return this.registry().uninstall(name);
    };
    prototype.installed = function(name){
      if (!name) {
        return;
      }
      console.log('installed:' + name);
      this.installs.push(name);
      return name;
    };
    prototype.registry = function(options){
      options || (options = this.options);
      return this._registry || (this._registry = new Registry(options));
    };
    prototype.build = function(cb, options){
      this.install();
      return this.configurator(options).build(cb);
    };
    prototype.configurator = function(options){
      options || (options = this.options);
      return new Configurator(options);
    };
    prototype.lines = function(){
      return this._lines || (this._lines = this.content.split("\n").filter(function(x){
        return !!x;
      }).map(function(x){
        return x.trim();
      }));
    };
    prototype.list = function(){
      return this.lines();
    };
    prototype.clear = function(){
      return this._lines = void 8;
    };
    prototype.index = function(name){
      return this.lines().indexOf(name);
    };
    return Select;
  }(FileIO, ListMutator));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
