// Generated by LiveScript 1.2.0
(function(){
  var FileIO, fs, jsonlint, GlobalConfig, toString$ = {}.toString;
  FileIO = require('./util/file-io');
  fs = require('fs-extra');
  jsonlint = require('jsonlint');
  module.exports = GlobalConfig = (function(){
    GlobalConfig.displayName = 'GlobalConfig';
    var prototype = GlobalConfig.prototype, constructor = GlobalConfig;
    importAll$(prototype, arguments[0]);
    function GlobalConfig(options){
      this.options = options;
      this.librariesrc = './.librariesrc';
      this;
    }
    prototype.dirFor = function(type){
      return this.bowerDir(type) || this.componentsDir(type) || this.npmDir(type) || this.unknownDir(type);
    };
    prototype.bowerDir = function(type){
      if (type === 'bower') {
        return this.configuredBowerDir();
      }
    };
    prototype.componentsDir = function(type){
      if (type === 'component') {
        return 'components';
      }
    };
    prototype.npmDir = function(type){
      if (type === 'npm') {
        return 'node_modules';
      }
    };
    prototype.unknownDir = function(type){
      throw Error("Unknown package type: " + type);
    };
    prototype.configuredBowerDir = function(){
      if (this.exists('.bowerrc')) {
        return this.json('.bowerrc').directory;
      }
      return 'bower_components';
    };
    prototype.rcJson = function(){
      return this._rcJson || (this._rcJson = jsonlint.parse(this.loadRc()));
    };
    prototype.defaultLocationOf = function(paths){
      return this.locationOf(paths, this['default'](), true);
    };
    prototype.locationOf = function(paths, obj, d){
      var path, val, dir;
      if (toString$.call(paths).slice(8, -1) === 'String') {
        paths = paths.split('.');
      }
      if (paths === void 8) {
        return;
      }
      path = paths.shift();
      if (!obj) {
        return;
      }
      val = obj[path];
      if (toString$.call(val).slice(8, -1) === 'Function') {
        val = val();
      }
      if (d && path !== 'dir') {
        dir = obj.dir;
        if (toString$.call(dir).slice(8, -1) === 'Function') {
          dir = dir();
        }
        if (toString$.call(val).slice(8, -1) !== 'String') {
          val = path;
        }
        if (toString$.call(dir).slice(8, -1) === 'String') {
          val = [dir, val].join('/');
        }
      }
      if (paths.length === 0 || toString$.call(val).slice(8, -1) === 'String') {
        return val;
      }
      return this.locationOf(paths, val, true);
    };
    prototype.location = function(path){
      var locPath, loc;
      locPath = this.locationOf(path, this.rcJson());
      console.log(path, locPath);
      if (locPath) {
        loc = [this.rcJson().dir];
        loc = loc.concat(locPath);
        return loc.join('/');
      }
      return this.defaultLocationOf(path);
    };
    prototype.find = function(obj, path){
      var paths, val;
      if (toString$.call(path).slice(8, -1) === 'String') {
        paths = path.split('.');
      }
      if (paths === void 8) {
        return;
      }
      path = paths.shift();
      if (!obj) {
        return;
      }
      val = obj[path];
      if (toString$.call(val).slice(8, -1) === 'Function') {
        val = val();
      }
      if (paths.length === 0) {
        return val;
      }
      return this.find(val, paths);
    };
    prototype.loadRc = function(){
      return this.read(this.librariesrc);
    };
    prototype.get = function(path){
      return this.find(this.rcJson(), path) || this.find(this['default'](), path);
    };
    prototype.preferences = function(){
      return this.get('preferences');
    };
    prototype.select = function(){
      var this$ = this;
      return {
        file: function(){
          return this$.location('select.file');
        }
      };
    };
    prototype.builds = function(){
      var this$ = this;
      return {
        dir: function(){
          return this$.location('builds.dir');
        }
      };
    };
    prototype.components = function(){
      var this$ = this;
      return {
        dir: function(){
          return this$.location('components.dir');
        },
        file: function(){
          return this$.location('components.file');
        }
      };
    };
    prototype.config = function(){
      var this$ = this;
      return {
        file: function(){
          return this$.location('config.file');
        }
      };
    };
    prototype.registry = function(){
      var this$ = this;
      return {
        dir: function(){
          return this$.location('registry.dir');
        }
      };
    };
    prototype.registries = function(){
      return this.parseRegistries(this.location('registries'));
    };
    prototype.parseRegistries = function(regs){
      return regs;
    };
    prototype['default'] = function(){
      return {
        dir: './xlibs',
        builds: function(){
          var this$ = this;
          return {
            dir: function(){
              return [this$.dir, 'builds'].join('/');
            }
          };
        },
        components: function(){
          var this$ = this;
          return {
            dir: function(){
              return [this$.dir, 'components'].join('/');
            },
            file: function(){
              return [this.dir, 'index.json'].join('/');
            }
          };
        },
        select: function(){
          var this$ = this;
          return {
            file: function(){
              return [this$.dir, 'select'].join('/');
            }
          };
        },
        config: function(){
          var this$ = this;
          return {
            file: function(){
              return [this$.dir, 'config.json'].join('/');
            }
          };
        },
        registry: function(){
          var this$ = this;
          return {
            dir: function(){
              return [this$.dir, 'registry'].join('/');
            }
          };
        },
        registries: [{
          name: 'libraries-official',
          type: 'uri',
          repo: 'kristianmandrup/libraries'
        }],
        preferences: {
          styles: ["scss", "sass", "less", "css"],
          scripts: ["js", "min.js"]
        }
      };
    };
    return GlobalConfig;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
