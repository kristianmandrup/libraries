// Generated by LiveScript 1.2.0
(function(){
  var FileIO, fs, jsonlint, GlobalConfig;
  FileIO = require('./util/file-io');
  fs = require('fs-extra');
  jsonlint = require('jsonlint');
  module.exports = GlobalConfig = (function(){
    GlobalConfig.displayName = 'GlobalConfig';
    var prototype = GlobalConfig.prototype, constructor = GlobalConfig;
    importAll$(prototype, arguments[0]);
    function GlobalConfig(options){
      this.options = options;
      this.librariesrc = './.librariesrc';
      this;
    }
    prototype.rcJson = function(){
      return this._rcJson || (this._rcJson = jsonlint.parse(this.loadRc()));
    };
    prototype.loadRc = function(){
      return this.read(this.librariesrc);
    };
    prototype.select = {
      file: function(){
        return GlobalConfig.rcJson().select.file || GlobalConfig['default'].select().file();
      }
    };
    prototype.builds = function(){
      var this$ = this;
      return {
        dir: function(){
          return this$.rcJson().builds.dir || this$['default'].builds().dir();
        }
      };
    };
    prototype.components = function(){
      var this$ = this;
      return {
        dir: function(){
          return this$.rcJson().components.dir || this$['default'].components().dir();
        },
        file: function(){
          return this$.rcJson().components.file || this$['default'].components().file();
        }
      };
    };
    prototype.config = function(){
      var this$ = this;
      return {
        file: function(){
          return this$.rcJson().config.file || this$['default'].config().file;
        }
      };
    };
    prototype.registries = function(){
      return this.parseRegistries(this.rcJson().registries) || this['default'].registries;
    };
    prototype.parseRegistries = function(regs){
      return regs;
    };
    prototype['default'] = function(){
      return {
        dir: './xlibs/',
        builds: function(){
          var this$ = this;
          return {
            dir: function(){
              return [this$.dir, 'builds'].join('/');
            }
          };
        },
        components: function(){
          var this$ = this;
          return {
            dir: function(){
              return [this$.dir, 'components'].join('/');
            },
            file: function(){
              return [this.dir, 'index.json'].join('/');
            }
          };
        },
        select: function(){
          var this$ = this;
          return {
            file: function(){
              return [this$.dir, 'select'].join('/');
            }
          };
        },
        config: function(){
          var this$ = this;
          return {
            file: function(){
              return [this$.dir, 'config.json'].join('/');
            }
          };
        },
        registries: [{
          name: 'libraries-official',
          type: 'uri',
          repo: 'kristianmandrup/libraries'
        }]
      };
    };
    return GlobalConfig;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
