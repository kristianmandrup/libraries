// Generated by LiveScript 1.2.0
(function(){
  var FileIO, GlobalConfig, gconf, Transferer;
  FileIO = require('../util/file-io');
  GlobalConfig = require('../global-config');
  gconf = new GlobalConfig;
  module.exports = Transferer = (function(){
    Transferer.displayName = 'Transferer';
    var prototype = Transferer.prototype, constructor = Transferer;
    importAll$(prototype, arguments[0]);
    function Transferer(env){
      this.env = env;
      this.path = gconf.dir();
    }
    prototype.transfer = function(){
      this.copySelect();
      return this.copyConfig();
    };
    prototype.copySelect = function(env){
      var err;
      env || (env = this.env);
      try {
        return fs.copySync(this.selected(env), this.selected(this.target(env)));
      } catch (e$) {
        err = e$;
        this.error(err);
      }
    };
    prototype.copyConfig = function(env){
      var err;
      env || (env = this.env);
      try {
        return fs.copySync(this.config(env), this.config(this.target(env)));
      } catch (e$) {
        err = e$;
        this.error(err);
      }
    };
    prototype.target = function(env){
      switch (env) {
      case 'dev':
        return 'test';
      case 'test':
        return 'prod';
      default:
        return 'prod';
      }
    };
    prototype.selected = function(env){
      return [this.path, env, 'selected'].join('/');
    };
    prototype.config = function(env){
      return [this.path, env, 'config'].join('/');
    };
    return Transferer;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
