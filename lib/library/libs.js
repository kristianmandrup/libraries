// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 06/10/14
 * Time: 14:40
 */
(function(){
  var Lib, util, Libs, toString$ = {}.toString;
  Lib = require('./lib');
  util = require('util');
  module.exports = Libs = (function(){
    Libs.displayName = 'Libs';
    var prototype = Libs.prototype, constructor = Libs;
    function Libs(libs){
      this.libs = import$({}, libs);
      this.validate();
      this.parse();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.libs).slice(8, -1) !== 'Object') {
        throw new Error("Must be an Object");
      }
    };
    prototype.parse = function(){
      var i$, ref$, len$, name, results$ = [];
      this.libraries || (this.libraries = []);
      for (i$ = 0, len$ = (ref$ = Object.keys(this.libs)).length; i$ < len$; ++i$) {
        name = ref$[i$];
        results$.push(this.libraries[name] = this.validatedLib(name, this.libs[name]));
      }
      return results$;
    };
    prototype.libraryNames = function(){
      return Object.keys(this.libraries);
    };
    prototype.build = function(cb){
      this.building();
      return this.libraryNames().map(function(name){
        return this.library(name).output(cb);
      });
    };
    prototype.building = function(){
      return console.log(" - all libs");
    };
    prototype.add = function(name, lib){
      var key;
      if (toString$.call(name).slice(8, -1) === 'Object' && Object.keys(name).length === 1) {
        key = Object.keys(name)[0];
        lib = name[key];
        return this.add(key, lib);
      }
      this.libs[name] = this.validatedLib(name, lib);
      return this;
    };
    prototype.validatedLib = function(name, lib){
      switch (toString$.call(lib).slice(8, -1)) {
      case 'String':
        return new Lib(name, lib);
      case 'Object':
        return Lib.fromObject(name, lib);
      case 'Array':
        return new Lib(name, lib[0], lib[1]);
      default:
        throw new Error("lib must be a String or Object, was: " + typeof lib);
      }
    };
    prototype.remove = function(name){
      if (this.library(name)) {
        delete this.libraries[name];
      }
      return this;
    };
    prototype.location = function(name){
      return this.library(name).location;
    };
    prototype.library = function(name){
      return this.libraries[name];
    };
    prototype.output = function(name, cb){
      return this.library(name).output(cb);
    };
    return Libs;
  }());
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
