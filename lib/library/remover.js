// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Remover, toString$ = {}.toString;
  FileIO = require('./file-io');
  Remover = {
    removeLibs: function(key, names){
      var obj, i$, ref$, len$, k, name;
      if (toString$.call(key).slice(8, -1) === 'Object' && Object.keys(key).length > 0) {
        obj = key;
        for (i$ = 0, len$ = (ref$ = Object.keys(obj)).length; i$ < len$; ++i$) {
          k = ref$[i$];
          this.removeLibs(k, obj[k]);
        }
        return this;
      }
      this.init(key);
      if (typeof names === 'string') {
        names = [names];
      }
      if (toString$.call(names).slice(8, -1) !== 'Array') {
        throw new Error("lib(s) to remove must be a String or Array");
      }
      if (!(names.length > 0)) {
        return;
      }
      for (i$ = 0, len$ = names.length; i$ < len$; ++i$) {
        name = names[i$];
        this.removeLib(key, name);
      }
      return this;
    },
    removeLib: function(key, name){
      var index;
      if (toString$.call(name).slice(8, -1) !== 'String') {
        throw new Error("lib to remove must be a String");
      }
      index = this.libs[key].libs.indexOf(name);
      if (index > -1) {
        this.libs[key].libs.splice(index, 1);
      }
      return this;
    }
  };
  import$(Remover, FileIO);
  module.exports = Remover;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
