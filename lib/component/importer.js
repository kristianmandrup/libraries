// Generated by LiveScript 1.2.0
(function(){
  var Component, Importer, toString$ = {}.toString;
  Component = require('./component');
  module.exports = Importer = (function(){
    Importer.displayName = 'Importer';
    var prototype = Importer.prototype, constructor = Importer;
    function Importer(obj, components){
      this.obj = obj;
      this.components = components;
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.obj).slice(8, -1) !== 'Object') {
        throw new Error("ComponentImporter must take an Object as first arg");
      }
      if (toString$.call(this.components).slice(8, -1) !== 'Object') {
        throw new Error("component must be an Object");
      }
    };
    prototype.importAll = function(cb){
      var locationObjs, name, ref$, comp, i$, len$, locationObj, results$ = [];
      locationObjs = [];
      for (name in ref$ = this.components) {
        comp = ref$[name];
        locationObjs.push(this.component(name, comp).locationObj());
      }
      for (i$ = 0, len$ = locationObjs.length; i$ < len$; ++i$) {
        locationObj = locationObjs[i$];
        results$.push(this.importObj(locationObj, cb));
      }
      return results$;
    };
    prototype.importObj = function(obj, cb){
      var key, locations, results$ = [];
      for (key in obj) {
        locations = obj[key];
        results$.push(this.importLoc(locations, cb));
      }
      return results$;
    };
    prototype.importLoc = function(locations, cb){
      var i$, len$, location, results$ = [];
      for (i$ = 0, len$ = locations.length; i$ < len$; ++i$) {
        location = locations[i$];
        results$.push(cb(this.obj.directory + '/' + location));
      }
      return results$;
    };
    prototype.component = function(name, comp){
      return new Component(name, comp);
    };
    return Importer;
  }());
}).call(this);
