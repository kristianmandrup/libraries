// Generated by LiveScript 1.2.0
(function(){
  var util, flatten, Component, toString$ = {}.toString;
  util = require('util');
  flatten = require('../util/array').flatten;
  module.exports = Component = (function(){
    Component.displayName = 'Component';
    var prototype = Component.prototype, constructor = Component;
    function Component(name, comp){
      this.name = name;
      this.comp = comp;
      this.validate();
      this.baseDir = this.comp.dir;
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name of component must be a String, was: " + util.inspect(this.name));
      }
      if (!this.comp) {
        throw new Error("Missing config Object argument");
      }
      if (toString$.call(this.comp).slice(8, -1) !== 'Object') {
        throw new Error("component must be an Object, was: " + util.inspect(this.comp));
      }
    };
    prototype.locationObj = function(){
      return this._locationObj || (this._locationObj = this._locObj());
    };
    prototype._locObj = function(){
      var obj, i$, ref$, len$, name, paths;
      obj = {};
      for (i$ = 0, len$ = (ref$ = ['main', 'scripts', 'styles', 'images', 'fonts', 'files']).length; i$ < len$; ++i$) {
        name = ref$[i$];
        paths = this.locations(name);
        if (paths) {
          obj[name] = paths;
        }
      }
      return obj;
    };
    prototype.locations = function(type){
      var conf, this$ = this;
      conf = this.comp[type];
      if (!conf) {
        return;
      }
      return conf.files.map(function(file){
        return this$.location(conf.dir, file);
      });
    };
    prototype.location = function(dir, file){
      return [this.baseDir, dir, file].filter(function(item){
        return !!item;
      }).join('/');
    };
    prototype.build = function(cb){
      this.building();
      return this.output(cb || this.emit);
    };
    prototype.building = function(){
      return console.log(" - component: " + this.name);
    };
    prototype.emit = function(locations){
      return locations.map(function(location){
        return "app.import('" + location + "');";
      });
    };
    prototype.types = function(){
      return Object.keys(this.locationObj());
    };
    prototype.output = function(cb){
      return this.flatOutput(cb);
    };
    prototype.flatOutput = function(cb){
      return flatten(this.typeOutput(cb));
    };
    prototype.typeOutput = function(cb){
      var this$ = this;
      return this.types().map(function(key){
        return cb(this$.locationObj()[key]);
      });
    };
    return Component;
  }());
}).call(this);
