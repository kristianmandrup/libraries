// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Registry, ConfigLoader, fs, util, GlobalConfig, gconf, ComponentConfig, toString$ = {}.toString;
  FileIO = require('../util/file-io');
  Registry = require('../registry/registry');
  ConfigLoader = require('../registry/config-loader');
  fs = require('fs');
  util = require('util');
  GlobalConfig = require('../global-config');
  gconf = new GlobalConfig;
  module.exports = ComponentConfig = (function(){
    ComponentConfig.displayName = 'ComponentConfig';
    var prototype = ComponentConfig.prototype, constructor = ComponentConfig;
    importAll$(prototype, arguments[0]);
    function ComponentConfig(name, path){
      this.name = name;
      this.path = path;
      this.path || (this.path = gconf.location('components.dir'));
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name of config to load must be a String, was: " + this.name);
      }
      if (toString$.call(this.path).slice(8, -1) !== 'String') {
        throw new Error("Name of path to load from must be a String, was: " + this.path);
      }
    };
    prototype.loadIt = function(){
      return this.validConfig(this.configLoader().loadConfig());
    };
    prototype.build = function(){
      throw new Error("Can't build this :P");
    };
    prototype.install = function(options){
      options == null && (options = {});
      if (this.shouldInstall(options)) {
        this.registry().install(this.name);
        return this.name;
      }
    };
    prototype.shouldInstall = function(options){
      options == null && (options = {});
      return options.force || this.notInLocal();
    };
    prototype.validConfig = function(config){
      if (toString$.call(config).slice(8, -1) === 'Object') {
        return config;
      }
      throw new Error("Invalid config for component " + this.name + ", was: " + util.inspect(config));
    };
    prototype.registry = function(){
      return this._registry || (this._registry = new Registry);
    };
    prototype.configLoader = function(){
      return this._configLoader || (this._configLoader = new ConfigLoader(this.name, this.path));
    };
    prototype.notInLocal = function(){
      return !this.configLoader().local().hasConfig(this.name);
    };
    return ComponentConfig;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
