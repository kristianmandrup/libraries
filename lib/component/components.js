// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 06/10/14
 * Time: 14:40
 */
(function(){
  var Component, ComponentConfig, ListMutator, fs, util, GlobalConfig, gconf, Components, toString$ = {}.toString;
  Component = require('./component');
  ComponentConfig = require('./component-config');
  ListMutator = require('../list-mutator');
  fs = require('fs');
  util = require('util');
  GlobalConfig = require('../../../../global-config');
  gconf = new GlobalConfig;
  module.exports = Components = (function(){
    Components.displayName = 'Components';
    var prototype = Components.prototype, constructor = Components;
    importAll$(prototype, arguments[0]);
    function Components(list, path){
      this.list = list;
      this.path = path;
      this.path || (this.path = gconf.components.dir);
      this.validate();
      this.listedComponents();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.list).slice(8, -1) !== 'Array') {
        throw new Error("Must be an Array, was: " + toString$.call(this.list).slice(8, -1));
      }
    };
    prototype.build = function(cb){
      var this$ = this;
      return this.all().map(function(component){
        return component.build(cb);
      });
    };
    prototype.all = function(){
      var this$ = this;
      return this.componentNames().map(function(name){
        return this$.component(name);
      });
    };
    prototype.component = function(name){
      var comp;
      comp = this.componentObject(name);
      if (!comp) {
        return {};
      }
      return new Component(name, comp);
    };
    prototype.componentObject = function(name){
      if (this.hasComponent(name)) {
        return this.listedComponents()[name];
      }
    };
    prototype.hasComponent = function(name){
      return this.listedComponents()[name];
    };
    prototype.install = function(){
      var i$, ref$, len$, name, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.list).length; i$ < len$; ++i$) {
        name = ref$[i$];
        results$.push(this.componentConfig(name).install());
      }
      return results$;
    };
    prototype.componentNames = function(){
      return this._componentNames || (this._componentNames = Object.keys(this.listedComponents()));
    };
    prototype.listedComponents = function(){
      return this._listedComponents || (this._listedComponents = this.loadListed());
    };
    prototype.loadListed = function(){
      var i$, ref$, len$, name, found;
      this.configurations = {};
      for (i$ = 0, len$ = (ref$ = this.list).length; i$ < len$; ++i$) {
        name = ref$[i$];
        found = this.componentConfig(name).loadIt();
        if (found) {
          this.configurations[name] = found;
        }
        if (!found) {
          console.log("WARNING: " + name + " config file not found");
        }
      }
      return this.configurations;
    };
    prototype.componentConfig = function(name){
      return new ComponentConfig(name, this.path);
    };
    prototype.addOne = function(name){
      if (this.has(name)) {
        return this;
      }
      this.list.push(name);
      return this;
    };
    prototype.removeOne = function(name){
      this._removeItem(this.list, name);
      return this;
    };
    prototype.index = function(name){
      return this.list.indexOf(name);
    };
    prototype.output = function(cb){
      return this.component(name).output(cb);
    };
    return Components;
  }(ListMutator));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
