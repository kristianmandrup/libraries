// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 06/10/14
 * Time: 14:40
 */
(function(){
  var Component, ListMutator, Registry, fs, util, Components, toString$ = {}.toString;
  Component = require('./component');
  ListMutator = require('../list-mutator');
  Registry = require('../registry/registry');
  fs = require('fs');
  util = require('util');
  module.exports = Components = (function(){
    Components.displayName = 'Components';
    var prototype = Components.prototype, constructor = Components;
    importAll$(prototype, arguments[0]);
    function Components(list, path){
      this.list = list;
      this.path = path;
      this.path || (this.path = './xlibs/components');
      this.validate();
      this.loadListedComponents();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.list).slice(8, -1) !== 'Array') {
        throw new Error("Must be an Array, was: " + toString$.call(this.list).slice(8, -1));
      }
    };
    prototype.component = function(name){
      return new Component(name, this.componentObject(name));
    };
    prototype.registry = function(){
      return this._reg || (this._reg = new Registry);
    };
    prototype.loadListedComponents = function(){
      var i$, ref$, len$, name, config;
      this.configurations = [];
      for (i$ = 0, len$ = (ref$ = this.list).length; i$ < len$; ++i$) {
        name = ref$[i$];
        config = this.loadConfig(name);
        if (this.validConfig(config, name)) {
          configurations.push(config);
        }
      }
      return this.configurations;
    };
    prototype.validConfig = function(config, name){
      if (toString$.call(config).slice(8, -1) !== 'Object') {
        throw new Error("Invalid config for component " + name + ", was: " + util.inspect(config));
      }
    };
    prototype.loadConfig = function(name){
      return this.loadFromLocal(name) || this.loadFromRegistry(name) || this.none(name);
    };
    prototype.loadFromLocal = function(){
      if (this.hasLocal(name)) {
        return this.load(this.componentFile(name));
      }
    };
    prototype.loadFromRegistry = function(){
      if (this.registry().has(name)) {
        return this.load(this.registryFile(name));
      }
    };
    prototype.load = function(filePath){
      var err;
      try {
        return JSON.parse(fs.readFileSync(filePath, 'utf8'));
      } catch (e$) {
        err = e$;
        return console.error(err);
      }
    };
    prototype.hasLocal = function(){
      return fs.existsSync(this.componentFile(name));
    };
    prototype.none = function(name){
      return this.error("No Component config for " + name + " could be found in local or global component configuration registries");
    };
    prototype.error = function(msg){
      return console.error(msg);
    };
    prototype.registryFile = function(name){
      return this.registry().configFile(name);
    };
    prototype.componentFile = function(name){
      return [this.path, name + ".json"].join('/');
    };
    prototype.componentObject = function(name){};
    prototype.addOne = function(name){
      this.list.push(name);
      return this;
    };
    prototype.removeOne = function(name){
      this._removeItem(this.list, name);
      return this;
    };
    prototype.index = function(name){
      return this.list.indexOf(name);
    };
    prototype.output = function(){
      return this.component(name).output();
    };
    return Components;
  }(ListMutator));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
