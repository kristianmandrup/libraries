// Generated by LiveScript 1.2.0
(function(){
  var Selector, Configurator, Registry, Generator, ConfigLoader, Transferer, fs;
  Selector = require('./select/selector');
  Configurator = require('./config/configurator');
  Registry = require('./registry/registry');
  Generator = require('./output/generator');
  ConfigLoader = require('./registry/config-loader');
  Transferer = require('./tranferer/tranferer');
  fs = require('fs-extra');
  module.exports = {
    select: function(opts){
      opts == null && (opts = {});
      return this._selector || (this._selector = new Selector(opts) || this.options);
    },
    setup: function(){
      var xlibsSrc;
      xlibsSrc = path.resolve(__dirname, 'setup/xlibs');
      return fs.copy(xlibsSrc, '.', function(err){
        if (err) {
          return console.error(err);
        }
      });
    },
    add: function(opts){
      opts == null && (opts = {});
      return this.config(opts).add(opts);
    },
    remove: function(opts){
      opts == null && (opts = {});
      return this.config(opts).remove(opts);
    },
    config: function(opts){
      opts == null && (opts = {});
      return this._config || (this._config = new Configurator(opts) || this.options);
    },
    registry: function(opts){
      opts == null && (opts = {});
      return new Registry(opts || this.options);
    },
    generator: function(opts){
      opts == null && (opts = {});
      return this._generator || (this._generator = new Generator(opts) || this.options);
    },
    configLoader: function(name, path){
      return this._configLoader || (this._configLoader = new ConfigLoader(name, path));
    },
    transferer: function(){
      return function(env){
        return this._transferer || (this._transferer = new Transferer(env));
      };
    },
    success: function(){
      return console.log(chalk.green('success ;>)'));
    },
    install: function(opts){
      console.log('installing...');
      this.select(opts).install();
      return this.success();
    },
    transfer: function(env){
      env == null && (env = 'dev');
      return this.transferer.transfer(env);
    },
    uninstall: function(name, opts){
      this.registry(opts).uninstall(name);
      return this.success();
    },
    loadApplier: function(opts){
      opts == null && (opts = {});
      return this.generator(opts).load();
    },
    build: function(opts){
      var cb, build;
      console.log('building...', this.config);
      this.install(opts);
      if (opts) {
        cb = opts.cb;
      }
      build = this.select(opts).build(cb);
      this.generator(opts).generate(build);
      return this.success();
    }
  };
}).call(this);
