// Generated by LiveScript 1.2.0
(function(){
  var Selector, Configurator, Registry, Generator, ConfigLoader, Transferer, fs, path, chalk;
  Selector = require('./select/selector');
  Configurator = require('./config/configurator');
  Registry = require('./registry/registry');
  Generator = require('./output/generator');
  ConfigLoader = require('./registry/config-loader');
  Transferer = require('./transferer/transferer');
  fs = require('fs-extra');
  path = require('path');
  chalk = require('chalk');
  module.exports = {
    select: function(opts){
      opts == null && (opts = {});
      return this._selector || (this._selector = new Selector(opts) || this.options);
    },
    setup: function(dir){
      var xlibsSrc, e, this$ = this;
      dir == null && (dir = 'xlibs');
      console.log("Installing libraries configuration in: " + dir);
      try {
        xlibsSrc = path.resolve(__dirname, '../setup/xlibs');
        console.log('copy xlibs');
        return fs.copy(xlibsSrc, "./" + dir, function(err){
          var rcfile;
          if (err) {
            return console.error(err);
          }
          rcfile = path.resolve(__dirname, '../setup/.librariesrc');
          console.log('create .librariesrc');
          return fs.copy(rcfile, ".librariesrc", function(err){
            var content;
            if (err) {
              return console.error(err);
            }
            if (dir !== 'xlibs') {
              console.log("replace xlibs with: " + dir);
              content = fs.readFileSync(".librariesrc", 'utf8');
              content = content.replace(/xlibs/, dir);
              fs.writeFileSync(".librariesrc", content, 'utf8');
            }
            this$.wasSuccess();
            return true;
          });
        });
      } catch (e$) {
        e = e$;
        return this.wasError(e);
      }
    },
    add: function(opts){
      opts == null && (opts = {});
      return this.config(opts).add(opts);
    },
    remove: function(opts){
      opts == null && (opts = {});
      return this.config(opts).remove(opts);
    },
    config: function(opts){
      opts == null && (opts = {});
      return this._config || (this._config = new Configurator(opts) || this.options);
    },
    registry: function(opts){
      opts == null && (opts = {});
      return new Registry(opts || this.options);
    },
    generator: function(opts){
      opts == null && (opts = {});
      return this._generator || (this._generator = new Generator(opts) || this.options);
    },
    configLoader: function(name, path){
      return this._configLoader || (this._configLoader = new ConfigLoader(name, path));
    },
    transferer: function(){
      return function(env){
        return this._transferer || (this._transferer = new Transferer(env));
      };
    },
    install: function(opts){
      console.log('installing...');
      this.select(opts).install();
      return this.success();
    },
    transfer: function(env){
      env == null && (env = 'dev');
      return this.transferer.transfer(env);
    },
    uninstall: function(name, opts){
      this.registry(opts).uninstall(name);
      return this.success();
    },
    loadApplier: function(opts){
      opts == null && (opts = {});
      return this.generator(opts).load();
    },
    build: function(opts){
      var cb, build, e;
      console.log('building...', this.config);
      try {
        this.install(opts);
        if (opts) {
          cb = opts.cb;
        }
        build = this.select(opts).build(cb);
        this.generator(opts).generate(build);
        return this.wasSuccess();
      } catch (e$) {
        e = e$;
        return this.wasError(e);
      }
    },
    wasSuccess: function(){
      return this.success('success ;>)');
    },
    wasError: function(e){
      this.error("Error :(");
      return console.log(e);
    },
    error: function(msg){
      return console.log(chalk.red(msg));
    },
    success: function(msg){
      return console.log(chalk.green(msg));
    }
  };
}).call(this);
