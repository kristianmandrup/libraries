// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Selector, chalk, util, flatten, isBlank, lines, Generator;
  FileIO = require('../file-io');
  Selector = require('../select/selector');
  chalk = require('chalk');
  util = require('util');
  flatten = require('../util/array').flatten;
  isBlank = function(str){
    return !str || /^\s*$/.test(str);
  };
  lines = function(build){
    return build.join('\n    ');
  };
  module.exports = Generator = (function(){
    Generator.displayName = 'Generator';
    var prototype = Generator.prototype, constructor = Generator;
    importAll$(prototype, arguments[0]);
    function Generator(options){
      var ref$;
      this.options = options != null
        ? options
        : {};
      (ref$ = this.options).path || (ref$.path = this.buildFile());
      (ref$ = this.options).env || (ref$.env = process.env.environment || 'dev');
      this;
    }
    prototype.buildFile = function(){
      if (this.options.env) {
        return this.envFile();
      } else {
        return './xlibs/builds';
      }
    };
    prototype.envPath = function(){
      return ['./xlibs', this.options.env, 'builds'].join('/');
    };
    prototype.build = function(cb){
      return this.selector().build(cb);
    };
    prototype.selector = function(){
      return new Selector;
    };
    prototype.targetFile = function(){
      return "imports-" + this.options.env + ".js";
    };
    prototype.targetPath = function(){
      return [this.options.path, this.targetFile()].join('/');
    };
    prototype.load = function(){
      return require(this.targetPath());
    };
    prototype.generate = function(build, opts){
      var content;
      opts == null && (opts = {});
      opts.cb || (opts.cb = this.options.cb);
      opts.wrapper || (opts.wrapper = this.options.wrapper || this.wrapped);
      build || (build = this.build(opts.cb));
      content = opts.wrapper(lines(this.unpacked(build)));
      if (isBlank(content)) {
        return this;
      }
      this.writeFile(this.targetPath(), content);
      this.log(this.success());
      return this;
    };
    prototype.log = function(msg){
      return console.log(msg);
    };
    prototype.unpacked = function(build){
      return flatten(build);
    };
    prototype.wrapped = function(build){
      return "(function() {\n  module.exports = function(app) {\n    " + build + "\n  }\n}).call(this);";
    };
    prototype.success = function(){
      return chalk.green(this.options.env + " build generated @ " + this.targetPath());
    };
    return Generator;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
