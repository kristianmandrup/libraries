// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Selector, chalk, Generator;
  FileIO = require('../file-io');
  Selector = require('../select/selector');
  chalk = require('chalk');
  module.exports = Generator = (function(){
    Generator.displayName = 'Generator';
    var prototype = Generator.prototype, constructor = Generator;
    importAll$(prototype, arguments[0]);
    function Generator(options){
      var ref$;
      this.options = options != null
        ? options
        : {};
      (ref$ = this.options).env || (ref$.env = process.env.environment || 'dev');
      (ref$ = this.options).path || (ref$.path = './xlibs');
      this;
    }
    prototype.build = function(cb){
      return this.select.build(cb);
    };
    prototype.select = function(){
      return new Selector;
    };
    prototype.targetFile = function(){
      return "imports-" + this.options.env + ".js";
    };
    prototype.targetPath = function(){
      return [this.options.path, this.targetFile()].join('/');
    };
    prototype.load = function(){
      return require(this.targetPath());
    };
    prototype.generate = function(build, opts){
      opts == null && (opts = {});
      opts.cb || (opts.cb = this.options.cb);
      opts.wrapper || (opts.wrapper = this.options.wrapper || this.wrapper);
      build || (build = this.build(opts.cb));
      this.save(this.targetPath(), opts.wrapper(build));
      console.log(this.success());
      return this;
    };
    prototype.wrapper = function(build){
      return "function() {\n  module.exports = function(app) {\n    " + build + "\n  }\n}();";
    };
    prototype.success = function(){
      return chalk.green(this.options.env + " build generated @ " + this.targetPath());
    };
    return Generator;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
