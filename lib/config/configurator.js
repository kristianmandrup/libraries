// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Components, Configurator, toString$ = {}.toString;
  FileIO = require('../file-io');
  Components = require('../component/components');
  module.exports = Configurator = (function(){
    Configurator.displayName = 'Configurator';
    var prototype = Configurator.prototype, constructor = Configurator;
    importAll$(prototype, arguments[0]);
    function Configurator(file){
      this.file = file;
      this.file || (this.file = './xlibs/config.json');
      this.validate();
      this.read();
      this.config = this.json().config || {};
      this;
    }
    prototype.cmps = function(){
      return this._cmps || (this._cmps = new Components(this));
    };
    prototype.validate = function(){
      if (!this.exists()) {
        throw new Error("File " + this.file + " does not exist");
      }
      if (toString$.call(this.containers()).slice(8, -1) !== 'Object') {
        throw new Error("Must have 'containers' Object");
      }
    };
    prototype.containers = function(){
      return this._containers || (this._containers = this.json().containers);
    };
    prototype.part = function(name){
      return this.containers()[name] || {};
    };
    prototype.components = function(name){
      return this.part(name).components || [];
    };
    prototype.libs = function(name){
      return this.part(name).libs || {};
    };
    prototype.isComponent = function(name){
      return this.components().indexOf(name) > -1;
    };
    prototype.isLib = function(name){
      return this.libs().indexOf(name) > -1;
    };
    prototype.has = function(name){
      return this.isComponent(name) || this.isLib(name);
    };
    return Configurator;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
