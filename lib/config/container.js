// Generated by LiveScript 1.2.0
(function(){
  var Libs, util, Components, ConfigContainer, toString$ = {}.toString;
  Libs = require('../library/libs');
  util = require('util');
  Components = require('../component/components');
  Libs = require('../library/libs');
  module.exports = ConfigContainer = (function(){
    ConfigContainer.displayName = 'ConfigContainer';
    var prototype = ConfigContainer.prototype, constructor = ConfigContainer;
    function ConfigContainer(container, config){
      this.container = container;
      this.config = config;
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.container).slice(8, -1) !== 'Object') {
        throw new Error("Container must be an Object, was: " + util.inspect(this.container));
      }
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw new Error("Config must be an Object, was: " + util.inspect(this.config));
      }
    };
    prototype.componentList = function(){
      return this._componentList || (this._componentList = this.container.components || []);
    };
    prototype.libs = function(){
      return this._libs || (this._libs = this.container.libs || {});
    };
    prototype.libsList = function(){
      return this._libsList || (this._libsList = Object.keys(this.libs()));
    };
    prototype.isComponent = function(name){
      return this.componentList().indexOf(name) > -1;
    };
    prototype.isLib = function(name){
      return this.libsList().indexOf(name) > -1;
    };
    prototype.has = function(name){
      return this.isComponent(name) || this.isLib(name);
    };
    prototype.components = function(){
      return this._components || (this._components = new Components(this.componentList()));
    };
    prototype.libraries = function(){
      return this._libraries || (this._libraries = new Libs(this.libs()));
    };
    prototype.build = function(cb){
      return this.libraries().build(cb).concat(this.components().build(cb));
    };
    prototype.output = function(list, cb){
      var i$, len$, lib, results$ = [];
      for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
        lib = list[i$];
        results$.push(this.outputLib(name, cb) || this.outputComponent(name, cb));
      }
      return results$;
    };
    prototype.outputComponent = function(name, cb){
      if (!this.isComponent(name)) {
        return;
      }
      return this.components().output(name, cb);
    };
    prototype.outputLib = function(name, cb){
      if (!this.isLib(name)) {
        return;
      }
      return this.libraries().output(name, cb);
    };
    return ConfigContainer;
  }());
}).call(this);
