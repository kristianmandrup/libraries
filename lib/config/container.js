// Generated by LiveScript 1.2.0
(function(){
  var Libs, ConfigContainer;
  Libs = require('../library/libs');
  module.exports = ConfigContainer = (function(){
    ConfigContainer.displayName = 'ConfigContainer';
    var prototype = ConfigContainer.prototype, constructor = ConfigContainer;
    function ConfigContainer(obj, config){
      this.obj = obj;
      this.config = config;
    }
    prototype.comps = function(){
      return this._comps || (this._comps = this.obj.components || []);
    };
    prototype.libs = function(){
      return this._libs || (this._libs = this.obj.libs || {});
    };
    prototype.libsList = function(){
      return this._libsList || (this._libsList = Object.keys(this.libs()));
    };
    prototype.isComponent = function(name){
      return this.comps().indexOf(name) > -1;
    };
    prototype.isLib = function(name){
      return this.libsList().indexOf(name) > -1;
    };
    prototype.has = function(name){
      return this.isComponent(name) || this.isLib(name);
    };
    prototype.components = function(){
      return this._components || (this._components = new Components(this.comps()));
    };
    prototype.libraries = function(){
      return this._libraries || (this._libraries = new Libs(this.libs()));
    };
    prototype.build = function(cb){
      return this.libraries().build(cb).concat(this.components().build(cb));
    };
    prototype.output = function(list, cb){
      var i$, len$, lib, results$ = [];
      for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
        lib = list[i$];
        results$.push(this.outputLib(name, cb) || this.outputComponent(name, cb));
      }
      return results$;
    };
    prototype.outputComponent = function(name, cb){
      if (!this.isComponent(name)) {
        return;
      }
      return this.components().output(name, cb);
    };
    prototype.outputLib = function(name, cb){
      if (!this.isLib(name)) {
        return;
      }
      return this.libraries().output(name, cb);
    };
    return ConfigContainer;
  }());
}).call(this);
