// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 06/10/14
 * Time: 14:06
 */
(function(){
  var FileIO, fs, Registry, toString$ = {}.toString;
  FileIO = require('../file-io');
  fs = require('fs-extra');
  module.exports = Registry = (function(){
    Registry.displayName = 'Registry';
    var prototype = Registry.prototype, constructor = Registry;
    importAll$(prototype, arguments[0]);
    function Registry(registryUri, localRegistryPath){
      this.registryUri = registryUri;
      this.localRegistryPath = localRegistryPath;
      this.registryUri || (this.registryUri = './xlibs/registry');
      this.localRegistryPath || (this.localRegistryPath = this.registryUri);
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.registryUri).slice(8, -1) !== 'String') {
        throw new Error("registryUri must be a String");
      }
      if (toString$.call(this.localRegistryPath).slice(8, -1) !== 'String') {
        throw new Error("localRegistryPath must be a String, was " + this.localRegistryPath);
      }
    };
    prototype.indexFile = function(){
      return [this.registryUri, 'index.json'].join('/');
    };
    prototype.index = function(){
      return this._index || (this._index = this.json(this.indexFile()));
    };
    prototype.list = function(){
      return this._list || (this._list = index.registry);
    };
    prototype.has = function(name){
      return this.list.indexOf(name > -1);
    };
    prototype.configFile = function(name){
      return [this.registryUri, name + ".json"].join('/');
    };
    prototype.targetConfig = function(name){
      return [this.localRegistryPath, name + ".json"].join('/');
    };
    prototype.error = function(msg){
      return console.error(msg);
    };
    prototype.install = function(name){
      var err;
      try {
        return fs.copySync(this.configFile(name), this.targetConfig(name));
      } catch (e$) {
        err = e$;
        return this.error(err);
      }
    };
    prototype.uninstall = function(name){
      var err;
      try {
        return fs.unlinkSync(this.targetConfig(name));
      } catch (e$) {
        err = e$;
        return this.error(err);
      }
    };
    return Registry;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
