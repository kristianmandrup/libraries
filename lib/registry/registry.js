// Generated by LiveScript 1.2.0
(function(){
  var FileAdapter, UriAdapter, Registry, toString$ = {}.toString;
  FileAdapter = require('./adapter/file-adapter');
  UriAdapter = require('./adapter/uri-adapter');
  module.exports = Registry = (function(){
    Registry.displayName = 'Registry';
    var prototype = Registry.prototype, constructor = Registry;
    function Registry(options){
      this.options = options != null
        ? options
        : {};
      this.parse();
      this.validate();
      this;
    }
    prototype.parse = function(){
      return this.type || (this.type = this.options.type || 'local');
    };
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Type must be a String, was: " + this.type);
      }
    };
    prototype.install = function(name){
      return this.adapter().install(name);
    };
    prototype.adapter = function(){
      return new this.selectedAdapter()(this.options);
    };
    prototype.selectedAdapter = function(){
      return adapters[this.type] || this.badAdapter();
    };
    prototype.adapters = {
      local: LocalAdapter,
      remote: RemoteAdapter
    };
    prototype.badAdapter = function(){
      return this.error("Registry adapter " + this.type + " has not been registered");
    };
    prototype.error = function(msg){
      throw new Error;
    };
    return Registry;
  }());
}).call(this);
