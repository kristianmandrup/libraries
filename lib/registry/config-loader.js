// Generated by LiveScript 1.2.0
(function(){
  var RemoteLoader, LocalLoader, CompositeLoader, GlobalConfig, gconf, ConfigLoader, toString$ = {}.toString;
  RemoteLoader = require('./config/loader/remote-loader');
  LocalLoader = require('./config/loader/local-loader');
  CompositeLoader = require('./config/loader/composite-loader');
  GlobalConfig = require('../global-config');
  gconf = new GlobalConfig;
  module.exports = ConfigLoader = (function(){
    ConfigLoader.displayName = 'ConfigLoader';
    var prototype = ConfigLoader.prototype, constructor = ConfigLoader;
    function ConfigLoader(name, path, options){
      this.name = name;
      this.path = path;
      this.options = options != null
        ? options
        : {};
      this.path || (this.path = this.componentsPath());
      this.validate();
      this;
    }
    prototype.componentsPath = function(){
      if (this.options.env) {
        return this.envPath();
      } else {
        return gconf.components().dir();
      }
    };
    prototype.envPath = function(){
      return [gconf.dir, this.options.env, 'components'].join('/');
    };
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name of config to load must be a String, was: " + this.name);
      }
      if (toString$.call(this.path).slice(8, -1) !== 'String') {
        throw new Error("Path of config to load must be a String, was: " + this.path);
      }
    };
    prototype.loadConfig = function(){
      return this.local().loadConfig() || this.remote().loadConfig() || this.noneLoaded();
    };
    prototype.composite = function(){
      return this._composite || (this._composite = new CompositeLoader(this.name, this.path, this.options));
    };
    prototype.local = function(){
      return this._local || (this._local = new LocalLoader(this.name, this.path, this.options));
    };
    prototype.remote = function(){
      return this._remote || (this._remote = new RemoteLoader(this.name, this.options));
    };
    prototype.noneLoaded = function(){
      return this.error("Component config for " + this.name + " could not be found in either local or global component configuration registries");
    };
    prototype.error = function(msg){
      return console.error(msg);
    };
    return ConfigLoader;
  }());
}).call(this);
