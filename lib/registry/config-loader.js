// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 12/10/14
 * Time: 12:26
 */
(function(){
  var RemoteConfigLoader, LocalConfigLoader, ConfigLoader, toString$ = {}.toString;
  RemoteConfigLoader = require('./config-loader/remote');
  LocalConfigLoader = require('./config-loader/local');
  module.exports = ConfigLoader = (function(){
    ConfigLoader.displayName = 'ConfigLoader';
    var prototype = ConfigLoader.prototype, constructor = ConfigLoader;
    function ConfigLoader(name, path){
      this.name = name;
      this.path = path;
      this.path || (this.path = './xlibs/components');
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name of config to load must be a String, was: " + this.name);
      }
      if (toString$.call(this.path).slice(8, -1) !== 'String') {
        throw new Error("Path of config to load must be a String, was: " + this.path);
      }
    };
    prototype.loadConfig = function(){
      return this.local().loadConfig() || this.remote().loadConfig() || this.noneLoaded();
    };
    prototype.local = function(){
      return this._local || (this._local = new LocalConfigLoader(this.name, this.path));
    };
    prototype.remote = function(){
      return this._remote || (this._remote = new RemoteConfigLoader(this.name));
    };
    prototype.noneLoaded = function(){
      return this.error("Component config for " + this.name + " could not be found in either local or global component configuration registries");
    };
    prototype.error = function(msg){
      return console.error(msg);
    };
    return ConfigLoader;
  }());
}).call(this);
