// Generated by LiveScript 1.2.0
(function(){
  var fs, jsonlint, FileIO, BaseInstaller, FileInstaller;
  fs = require('fs-extra');
  jsonlint = require('jsonlint');
  FileIO = require('../../file-io');
  BaseInstaller = require('./base-installer');
  module.exports = FileInstaller = (function(superclass){
    var prototype = extend$((import$(FileInstaller, superclass).displayName = 'FileInstaller', FileInstaller), superclass).prototype, constructor = FileInstaller;
    importAll$(prototype, arguments[1]);
    function FileInstaller(name, content, file, options){
      this.name = name;
      this.content = content;
      this.file = file;
      this.options = options != null
        ? options
        : {};
      FileInstaller.superclass.apply(this, arguments);
    }
    prototype.install = function(){
      var err;
      if (this.exists(this.file)) {
        return;
      }
      try {
        this.installing;
        this.writeFile();
        return this.name;
      } catch (e$) {
        err = e$;
        this.error(err);
      }
    };
    prototype.uninstall = function(){
      var err;
      try {
        this.uninstalling;
        return this.removeFile();
      } catch (e$) {
        err = e$;
        return this.error(err);
      }
    };
    return FileInstaller;
  }(BaseInstaller, FileIO));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
