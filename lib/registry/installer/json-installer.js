// Generated by LiveScript 1.2.0
(function(){
  var fs, FileIO, BaseInstaller, JsonInstaller, toString$ = {}.toString;
  fs = require('fs-extra');
  FileIO = require('../../file-io');
  BaseInstaller = require('./base-installer');
  module.exports = JsonInstaller = (function(superclass){
    var prototype = extend$((import$(JsonInstaller, superclass).displayName = 'JsonInstaller', JsonInstaller), superclass).prototype, constructor = JsonInstaller;
    importAll$(prototype, arguments[1]);
    function JsonInstaller(name, source, file, options){
      this.name = name;
      this.source = source;
      this.file = file;
      this.options = options != null
        ? options
        : {};
      this.convert();
      this.validate();
    }
    prototype.convert = function(){
      if (toString$.call(this.source).slice(8, -1) === 'String') {
        return this.source = this.jsonlint(this.source);
      }
    };
    prototype.components = function(){
      return this.json().components;
    };
    prototype.stringified = function(){
      return JSON.stringify(this.source);
    };
    prototype.install = function(){
      var err;
      if (this.components()[this.name]) {
        return;
      }
      try {
        this.installing();
        this.components()[this.name] = this.source;
        this.content = this.stringified();
        this.writeFile();
        return name;
      } catch (e$) {
        err = e$;
        this.error(err);
      }
    };
    prototype.uninstallFile = function(){
      var err;
      try {
        this.uninstalling(name);
        return fs.unlinkSync(this.file);
      } catch (e$) {
        err = e$;
        return this.error(err);
      }
    };
    prototype.uninstallFile = function(){
      var err;
      try {
        if (this.components()[this.name]) {
          delete this.components()[this.name];
        }
        return this.writeFile();
      } catch (e$) {
        err = e$;
        return this.error(err);
      }
    };
    return JsonInstaller;
  }(BaseInstaller, FileIO));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
