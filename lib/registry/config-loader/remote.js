// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 12/10/14
 * Time: 12:30
 */
(function(){
  var BaseConfigLoader, Registry, RemoteConfigLoader;
  BaseConfigLoader = require('./base');
  Registry = require('../registry');
  module.exports = RemoteConfigLoader = (function(superclass){
    var prototype = extend$((import$(RemoteConfigLoader, superclass).displayName = 'RemoteConfigLoader', RemoteConfigLoader), superclass).prototype, constructor = RemoteConfigLoader;
    function RemoteConfigLoader(name){
      this.name = name;
      RemoteConfigLoader.superclass.apply(this, arguments);
    }
    prototype.configFile = function(name){
      name || (name = this.name);
      return this.registry().configFile(name);
    };
    prototype.hasConfig = function(name){
      name || (name = this.name);
      return this.registry().has(name);
    };
    prototype.registry = function(){
      return this._registry || (this._registry = new Registry);
    };
    return RemoteConfigLoader;
  }(BaseConfigLoader));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
