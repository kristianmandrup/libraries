// Generated by LiveScript 1.2.0
(function(){
  var co, search, warning, registry, Q, ComponentAdapter, toString$ = {}.toString;
  co = require('co');
  search = co(require('component-search2'));
  warning = function(msg){
    throw Error(msg);
  };
  registry = {
    search: function(query, cb){
      return search(query, function(err, pkgs){
        if (err) {
          cb(err);
        }
        if (!pkgs.length) {
          cb('no matching components found');
        }
        return cb(null, pkgs);
      });
    }
  };
  Q = require('q');
  module.exports = ComponentAdapter = (function(){
    ComponentAdapter.displayName = 'ComponentAdapter';
    var prototype = ComponentAdapter.prototype, constructor = ComponentAdapter;
    function ComponentAdapter(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      this.validate();
      if (this.options.repo) {
        this.repos.push(this.options.repo);
      }
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name of bower component must be a String, was: " + util.inspect(this.name));
      }
    };
    prototype.adapted = {
      main: {},
      scripts: {},
      styles: {},
      fonts: {},
      images: {},
      files: {}
    };
    prototype.configure = function(pkg){
      var key, results$ = [];
      for (key in this.adapted) {
        if (pkg[key]) {
          results$.push(this.adapted[key].files = pkg[key]);
        }
      }
      return results$;
    };
    prototype.retrieve = function(){
      var this$ = this;
      return this.find().promise.then(function(pkgs){
        return this$.configure(pkgs[0]);
      });
    };
    prototype.query = function(){
      return this._query || (this._query = {
        text: this.name,
        limit: 5,
        maxage: 1000 * 3600,
        verbose: true
      });
    };
    prototype.find = function(){
      var deferred;
      deferred = Q.defer();
      registry.search(this.query(), deferred.makeNodeResolver());
      return deferred;
    };
    return ComponentAdapter;
  }());
}).call(this);
