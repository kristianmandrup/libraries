// Generated by LiveScript 1.2.0
(function(){
  var LocalBowerAdapter, RemoteBowerAdapter, RemoteComponentAdapter, LocalComponentAdapter, PkgAdapter, toString$ = {}.toString;
  LocalBowerAdapter = require('./package/bower/local-bower');
  RemoteBowerAdapter = require('./package/bower/remote-bower');
  RemoteComponentAdapter = require('./package/component/remote-component');
  LocalComponentAdapter = require('./package/component/local-component');
  module.exports = PkgAdapter = (function(){
    PkgAdapter.displayName = 'PkgAdapter';
    var prototype = PkgAdapter.prototype, constructor = PkgAdapter;
    function PkgAdapter(options){
      this.options = options != null
        ? options
        : {};
      this.type = this.options.type || 'bower';
      this.from = this.options.from || 'local';
      this.name = options.name;
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.type).slice(8, -1) !== 'String') {
        throw new Error("Type must be a String, was: " + this.type);
      }
      if (toString$.call(this.from).slice(8, -1) !== 'String') {
        throw new Error("From must be a String, was: " + this.from);
      }
    };
    prototype.adapt = function(name){
      name || (name = this.name);
      return this.adapter().adapt();
    };
    prototype.adapter = function(name){
      var clazz;
      name || (name = this.name);
      clazz = this.adapterClazz();
      return new clazz(name);
    };
    prototype.adapterClazz = function(){
      return this.adapters[this.from][this.type] || this.badAdapter();
    };
    prototype.badAdapter = function(){
      return this.error("Adapter " + this.from + " for " + this.type + " has not been registered");
    };
    prototype.error = function(msg){
      return console.error(msg);
    };
    prototype.adapters = {
      local: {
        bower: LocalBowerAdapter,
        component: LocalComponentAdapter
      },
      remote: {
        bower: RemoteBowerAdapter,
        component: RemoteComponentAdapter
      }
    };
    return PkgAdapter;
  }());
}).call(this);
