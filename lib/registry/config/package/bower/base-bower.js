// Generated by LiveScript 1.2.0
(function(){
  var FileIO, BaseBowerAdapter, GlobalConfig, gconf, jsonlint, LocalBowerAdapter, toString$ = {}.toString;
  FileIO = require('../../../../util/file-io');
  BaseBowerAdapter = require('./base-bower');
  GlobalConfig = require('../../../../global-config');
  gconf = new GlobalConfig;
  jsonlint = require('jsonlint');
  module.exports = LocalBowerAdapter = (function(){
    LocalBowerAdapter.displayName = 'LocalBowerAdapter';
    var prototype = LocalBowerAdapter.prototype, constructor = LocalBowerAdapter;
    importAll$(prototype, arguments[0]);
    function LocalBowerAdapter(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      this.validate();
      if (this.options.repo) {
        this.repos.push(this.options.repo);
      }
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name of bower component must be a String, was: " + util.inspect(this.name));
      }
    };
    prototype.adapt = function(){
      return this.files().then(function(files){
        return {
          files: files
        };
      });
    };
    prototype.files = function(){
      if (this.hasMain()) {
        return this.mainFiles();
      } else {
        return [];
      }
    };
    prototype.hasMain = function(){
      return this.mainFiles().then(function(files){
        return files && files.length > 0;
      });
    };
    prototype.mainFiles = function(){
      return this.bowerJson().then(function(json){
        return json.main;
      });
    };
    prototype.bowerJson = function(){
      return this.bower || (this.bower = this.retrieve().then(function(body){
        return jsonlint.parse(body);
      }));
    };
    prototype.retrieve = function(){
      return this.retrieveBody(this.repoUri());
    };
    return LocalBowerAdapter;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
