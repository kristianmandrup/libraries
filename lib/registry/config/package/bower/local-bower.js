// Generated by LiveScript 1.2.0
(function(){
  var BaseBowerAdapter, GlobalConfig, gconf, fs, util, Q, LocalBowerAdapter;
  BaseBowerAdapter = require('./base-bower');
  GlobalConfig = require('../../../../global-config');
  gconf = new GlobalConfig;
  fs = require('fs-extra');
  util = require('util');
  Q = require('q');
  module.exports = LocalBowerAdapter = (function(superclass){
    var prototype = extend$((import$(LocalBowerAdapter, superclass).displayName = 'LocalBowerAdapter', LocalBowerAdapter), superclass).prototype, constructor = LocalBowerAdapter;
    function LocalBowerAdapter(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      LocalBowerAdapter.superclass.apply(this, arguments);
    }
    prototype.repoUri = function(){
      return [this.repoPath(), 'bower.json'].join('/');
    };
    prototype.repoPath = function(){
      return [this.bowerDir(), this.name].join('/');
    };
    prototype.bowerDir = function(){
      return gconf.dirFor('bower');
    };
    prototype.retrieveBody = function(uri){
      var deferred, this$ = this;
      deferred = Q.defer();
      fs.readFile(uri, 'utf-8', deferred.makeNodeResolver());
      return deferred.promise.then(function(body){
        return body;
      });
    };
    return LocalBowerAdapter;
  }(BaseBowerAdapter));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
