// Generated by LiveScript 1.2.0
(function(){
  var co, search, warning, registry, BaseComponentAdapter, RemoteComponentAdapter;
  co = require('co');
  search = co(require('component-search2'));
  warning = function(msg){
    throw Error(msg);
  };
  registry = {
    search: function(query, cb){
      return search(query, function(err, pkgs){
        if (err) {
          cb(err);
        }
        if (!pkgs.length) {
          cb('no matching components found');
        }
        return cb(null, pkgs);
      });
    }
  };
  BaseComponentAdapter = require('./base-component');
  module.exports = RemoteComponentAdapter = (function(superclass){
    var prototype = extend$((import$(RemoteComponentAdapter, superclass).displayName = 'RemoteComponentAdapter', RemoteComponentAdapter), superclass).prototype, constructor = RemoteComponentAdapter;
    function RemoteComponentAdapter(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      RemoteComponentAdapter.superclass.apply(this, arguments);
    }
    prototype.query = function(){
      return this._query || (this._query = {
        text: this.name,
        limit: 5,
        maxage: 1000 * 3600,
        verbose: true
      });
    };
    prototype.find = function(){
      var deferred;
      deferred = Q.defer();
      registry.search(this.query(), deferred.makeNodeResolver());
      return deferred;
    };
    return RemoteComponentAdapter;
  }(BaseComponentAdapter));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
