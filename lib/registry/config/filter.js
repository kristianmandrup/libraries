// Generated by LiveScript 1.2.0
(function(){
  var GlobalConfig, gconf, path, Filter, toString$ = {}.toString;
  GlobalConfig = require('../../global-config');
  gconf = new GlobalConfig;
  path = require('path');
  module.exports = Filter = (function(){
    Filter.displayName = 'Filter';
    var prototype = Filter.prototype, constructor = Filter;
    function Filter(config){
      this.config = config;
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw new Error("Config to filter must be an Object, was: " + this.config);
      }
    };
    prototype.filter = function(){
      var res, i$, ref$, len$, key;
      res = {};
      for (i$ = 0, len$ = (ref$ = this.filterPrefKeys()).length; i$ < len$; ++i$) {
        key = ref$[i$];
        res[key] || (res[key] = {});
        res[key].files = this.filterOn(key);
      }
      return res;
    };
    prototype.filterOn = function(name){
      var files, prefs, res, i$, len$, file, filtered, j$, len1$, f;
      files = this.configFor(name).files;
      prefs = this.prefsFor(name);
      res = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        file = files[i$];
        filtered = this.filterOne(files, file, prefs);
        for (j$ = 0, len1$ = filtered.length; j$ < len1$; ++j$) {
          f = filtered[j$];
          if (!(res.indexOf(f) > -1)) {
            res.push(f);
          }
        }
      }
      return res;
    };
    prototype.filterPref = function(files, prefs){
      var i$, len$, pref, j$, len1$, file;
      if (toString$.call(prefs).slice(8, -1) !== 'Array') {
        prefs = [prefs];
      }
      for (i$ = 0, len$ = prefs.length; i$ < len$; ++i$) {
        pref = prefs[i$];
        for (j$ = 0, len1$ = files.length; j$ < len1$; ++j$) {
          file = files[j$];
          if (this.matches(file, pref)) {
            return file;
          }
        }
      }
    };
    prototype.filterOne = function(files, file, prefs){
      var sameFiles, bestFile;
      sameFiles = this.same(files, file);
      bestFile = this.filterPref(sameFiles, prefs);
      return files.filter(function(file){
        return file === bestFile || sameFiles.indexOf(file) === -1;
      });
    };
    prototype.same = function(files, file){
      var fname, this$ = this;
      fname = this.fileName(file);
      return files.filter(function(name){
        return this$.fileName(name) === fname;
      });
    };
    prototype.fileName = function(file){
      var lname, matches;
      lname = path.basename(file, path.extname(file));
      matches = lname.match(/(.*)\./);
      if (matches) {
        return matches[1];
      } else {
        return lname;
      }
    };
    prototype.matches = function(file, pref){
      var bname, matches, ext;
      if (toString$.call(pref).slice(8, -1) !== 'String') {
        return false;
      }
      bname = path.basename(file);
      matches = file.match(/\.(.*)/);
      ext = matches[1];
      return !!(ext === pref);
    };
    prototype.configFor = function(name){
      return this.config[name];
    };
    prototype.prefsFor = function(name){
      return this.filterPrefs()[name];
    };
    prototype.filterPrefKeys = function(){
      return Object.keys(this.filterPrefs());
    };
    prototype.filterPrefs = function(){
      return this.prefs || (this.prefs = gconf.preferences());
    };
    return Filter;
  }());
}).call(this);
