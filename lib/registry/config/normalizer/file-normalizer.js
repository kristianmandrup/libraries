// Generated by LiveScript 1.2.0
(function(){
  var path, FileNormalizer, toString$ = {}.toString;
  path = require('path');
  module.exports = FileNormalizer = (function(){
    FileNormalizer.displayName = 'FileNormalizer';
    var prototype = FileNormalizer.prototype, constructor = FileNormalizer;
    function FileNormalizer(config, file){
      this.config = config;
      this.file = file;
      this.normalized = this.config || this.ownNormalized;
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (this.file && toString$.call(this.file).slice(8, -1) !== 'String') {
        throw Error("File must be a String, was: " + this.file);
      }
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw Error("Config must be an Object, was: " + this.file);
      }
    };
    prototype.normalize = function(file){
      this.file || (this.file = file);
      this.ext = this.extension();
      this.type = this.findType();
      if (this.type) {
        this.addFile();
      }
      return this.normalized;
    };
    prototype.extension = function(file){
      this.file || (this.file = file);
      return path.extname(this.file).slice(1);
    };
    prototype.findType = function(ext, file){
      var key, ref$, value;
      this.file || (this.file = file);
      this.ext || (this.ext = ext);
      for (key in ref$ = this.types) {
        value = ref$[key];
        if (value.indexOf(this.ext) > -1) {
          return key;
        }
      }
      return console.error("Unknown file type: " + this.ext + " for " + this.file);
    };
    prototype.types = {
      scripts: ['js', 'coffee', 'ls'],
      styles: ['css', 'scss', 'less', 'sass'],
      fonts: ['eof', 'svg'],
      images: ['jpg', 'png', 'gif', 'bmp']
    };
    prototype.addFile = function(type){
      var entry;
      this.type || (this.type = type);
      entry = this.normalized[this.type];
      entry.files || (entry.files = []);
      if (!(entry.files.indexOf(this.file) > -1)) {
        entry.files.push(this.file);
      }
      return this;
    };
    prototype.setDir = function(type){
      var dir, entry;
      this.type || (this.type = type);
      dir = path.dirname(this.file);
      entry = this.normalized[this.type];
      if (entry.dir === void 8) {
        entry.dir = dir;
      }
      if (entry.dir !== dir) {
        entry.dir = '';
      }
      return this;
    };
    prototype.ownNormalized = {
      main: {},
      scripts: {},
      styles: {},
      fonts: {},
      images: {},
      files: {}
    };
    return FileNormalizer;
  }());
}).call(this);
