// Generated by LiveScript 1.2.0
(function(){
  var path, isBlank, FilesNormalizer, toString$ = {}.toString, slice$ = [].slice;
  path = require('path');
  isBlank = function(str){
    return !str || /^\s*$/.test(str);
  };
  module.exports = FilesNormalizer = (function(){
    FilesNormalizer.displayName = 'FilesNormalizer';
    var prototype = FilesNormalizer.prototype, constructor = FilesNormalizer;
    function FilesNormalizer(config){
      this.config = config;
      this.validate();
      this.files = this.config.files;
    }
    prototype.validate = function(){
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw new Error("Config to normalize must be an Object, was: " + this.config);
      }
    };
    prototype.normalize = function(){
      var i$, ref$, len$, file, root;
      if (!this.files) {
        return this.config;
      }
      for (i$ = 0, len$ = (ref$ = this.files).length; i$ < len$; ++i$) {
        file = ref$[i$];
        this.normalizeOne(file);
      }
      root = this.findRootPath(path.dirname(file[0]));
      if (!isBlank(root)) {
        this.normalized.dir = root;
        return this.shortenPaths();
      }
    };
    prototype.shortenPaths = function(){
      var key, results$ = [];
      for (key in this.normalized) {
        results$.push(shortenPathsFor(this.normalized[key]));
      }
      return results$;
    };
    prototype.shortenPathsFor = function(entry){
      var shortenedFiles, i$, ref$, len$, file;
      shortenedFiles = [];
      for (i$ = 0, len$ = (ref$ = entry.files).length; i$ < len$; ++i$) {
        file = ref$[i$];
        shortened.push(this.shortenPath(file));
      }
      return this.normalized[key].files = shortenedFiles;
    };
    prototype.shortenPath = function(file){
      return file.slice(this.normalized.root.length);
    };
    prototype.normalized = {
      script: {},
      styles: {},
      fonts: {}
    };
    prototype.normalizeOne = function(file){
      var ext, type;
      ext = path.extname(file);
      type = this.findType(ext, file);
      if (type) {
        this.addFile(type, file);
        return this.setDir(type, file);
      }
    };
    prototype.findRootPath = function(filePath, lv, root){
      var paths, matchPath, i$, ref$, len$, file;
      lv == null && (lv = 0);
      paths = filePath.split('/');
      matchPath = slice$.call(paths, 0, lv + 1 || 9e9).join('/');
      for (i$ = 0, len$ = (ref$ = this.files).length; i$ < len$; ++i$) {
        file = ref$[i$];
        if (!matchPath.match(/^#{path}/)) {
          return root;
        }
      }
      return this.findRootPath(file, lv + 1, matchPath);
    };
    prototype.findType = function(type, file){
      var key, ref$, value;
      for (key in ref$ = this.types) {
        value = ref$[key];
        if (value.indexOf(type) > -1) {
          return key;
        }
      }
      return console.error("Unknown file type: " + type + " for " + file);
    };
    prototype.types = {
      script: ['js', 'coffee', 'ls'],
      styles: ['css', 'scss', 'less', 'sass'],
      fonts: ['eof', 'svg']
    };
    prototype.addFile = function(type, file){
      var ref$;
      (ref$ = normalized[type]).files || (ref$.files = []);
      return normalized[type].files.push(file);
    };
    prototype.setDir = function(type, file){
      var dir, current;
      dir = path.dirname(file);
      current = normalized[type].dir;
      if (current === void 8) {
        normalized[type].dir = dir;
      }
      if (current !== dir) {
        return normalized[type].dir = '';
      }
    };
    return FilesNormalizer;
  }());
}).call(this);
