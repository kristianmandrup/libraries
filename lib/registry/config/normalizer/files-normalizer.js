// Generated by LiveScript 1.2.0
(function(){
  var path, isBlank, FileNormalizer, RootPathNormalizer, FilesNormalizer, toString$ = {}.toString;
  path = require('path');
  isBlank = function(str){
    return !str || /^\s*$/.test(str);
  };
  FileNormalizer = require('./file-normalizer');
  RootPathNormalizer = require('./root-path-normalizer');
  module.exports = FilesNormalizer = (function(){
    FilesNormalizer.displayName = 'FilesNormalizer';
    var prototype = FilesNormalizer.prototype, constructor = FilesNormalizer;
    function FilesNormalizer(config){
      this.config = config;
      this.validate();
      this.files = this.config.files;
    }
    prototype.validate = function(){
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw new Error("Config to normalize must be an Object, was: " + this.config);
      }
    };
    prototype.normalize = function(){
      var i$, ref$, len$, file;
      if (!this.files) {
        return this.config;
      }
      for (i$ = 0, len$ = (ref$ = this.files).length; i$ < len$; ++i$) {
        file = ref$[i$];
        this.fileNormalizer().normalize(file);
      }
      return this.rootPathNormalizer().normalize();
    };
    prototype.fileNormalizer = function(){
      return new FileNormalizer(this.normalized);
    };
    prototype.rootPathNormalizer = function(){
      return new RootPathNormalizer(this.normalized);
    };
    prototype.normalized = {
      script: {},
      styles: {},
      fonts: {}
    };
    return FilesNormalizer;
  }());
}).call(this);
