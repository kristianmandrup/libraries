// Generated by LiveScript 1.2.0
(function(){
  var PathShortener, PathNormalizer, slice$ = [].slice;
  PathShortener = require('./path-shortener');
  module['export'] = PathNormalizer = (function(){
    PathNormalizer.displayName = 'PathNormalizer';
    var prototype = PathNormalizer.prototype, constructor = PathNormalizer;
    function PathNormalizer(config){
      this.config = config;
    }
    prototype.normalize = function(){
      if (!isBlank(this.root())) {
        this.config.dir = this.root();
        return this.pathShortener().shortenPaths();
      }
    };
    prototype.root = function(){
      return this._root || (this._root = this.findRootPath(path.dirname(file[0])));
    };
    prototype.findRootPath = function(filePath, lv, root){
      var paths, matchPath, i$, ref$, len$, file;
      lv == null && (lv = 0);
      paths = filePath.split('/');
      matchPath = slice$.call(paths, 0, lv + 1 || 9e9).join('/');
      for (i$ = 0, len$ = (ref$ = this.files).length; i$ < len$; ++i$) {
        file = ref$[i$];
        if (!matchPath.match(/^#{path}/)) {
          return root;
        }
      }
      return this.findRootPath(file, lv + 1, matchPath);
    };
    prototype.pathShortener = function(){
      return new PathShortener(this.config);
    };
    return PathNormalizer;
  }());
}).call(this);
