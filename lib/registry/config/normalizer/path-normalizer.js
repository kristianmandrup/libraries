// Generated by LiveScript 1.2.0
(function(){
  var PathShortener, RootPath, isBlank, PathNormalizer, toString$ = {}.toString;
  PathShortener = require('./path-shortener');
  RootPath = require('./root-path');
  isBlank = function(str){
    return !str || /^\s*$/.test(str);
  };
  module.exports = PathNormalizer = (function(){
    PathNormalizer.displayName = 'PathNormalizer';
    var prototype = PathNormalizer.prototype, constructor = PathNormalizer;
    function PathNormalizer(config, files){
      this.config = config;
      this.files = files;
      console.log('config', config);
      this.files || (this.files = this.config.files);
      this.validate();
    }
    prototype.validate = function(){
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw Error("Config must be an Object, was " + this.config);
      }
      if (toString$.call(this.files).slice(8, -1) !== 'Array') {
        throw Error("Must take a files array as 2nd argument, was: " + this.files);
      }
    };
    prototype.normalize = function(){
      var i$, ref$, len$, key;
      this.root = this.rootPathOf(this.files);
      if (!isBlank(this.root)) {
        this.config.dir = this.root;
        this.pathShortener(this.config).shortenPaths();
      }
      for (i$ = 0, len$ = (ref$ = this.configKeys()).length; i$ < len$; ++i$) {
        key = ref$[i$];
        this.normalizeFor(key);
      }
      return this.config;
    };
    prototype.configKeys = function(){
      if (!this.config.scripts) {
        return [];
      }
      return Object.keys(this.config);
    };
    prototype.normalizeFor = function(key){
      if (!(this.config[key].files && key !== 'dir')) {
        return;
      }
      console.log('normalize', key, this.config[key]);
      return new PathNormalizer(this.config[key]).normalize();
    };
    prototype.rootPathOf = function(files){
      return new RootPath(files);
    };
    prototype.pathShortener = function(config){
      config || (config = this.config);
      return new PathShortener(this.config);
    };
    return PathNormalizer;
  }());
}).call(this);
