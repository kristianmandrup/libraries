// Generated by LiveScript 1.2.0
(function(){
  var PathShortener, RootPath, isBlank, PathNormalizer, toString$ = {}.toString;
  PathShortener = require('./path-shortener');
  RootPath = require('./root-path');
  isBlank = function(str){
    return !str || /^\s*$/.test(str);
  };
  module.exports = PathNormalizer = (function(){
    PathNormalizer.displayName = 'PathNormalizer';
    var prototype = PathNormalizer.prototype, constructor = PathNormalizer;
    function PathNormalizer(config, files){
      this.config = config;
      this.files = files;
      this.files || (this.files = this.config.files);
      this.validate();
    }
    prototype.validate = function(){
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw Error("Config must be an Object, was " + this.config);
      }
      if (toString$.call(this.files).slice(8, -1) !== 'Array') {
        throw Error("Must take a files array as 2nd argument, was: " + this.files);
      }
    };
    prototype.normalize = function(){
      this.normalizeKeyFiles();
      this.normalizeKeyDirs();
      return this.config;
    };
    prototype.setRoot = function(){
      var root;
      root = this.rootPathOf(this.dirs()).find();
      if (toString$.call(root).slice(8, -1) === 'String') {
        this.root = root;
      }
      if (!isBlank(this.root)) {
        return this.config.dir = this.root;
      }
    };
    prototype.dirs = function(){
      var dirs, i$, ref$, len$, key;
      dirs = [];
      for (i$ = 0, len$ = (ref$ = this.configKeys()).length; i$ < len$; ++i$) {
        key = ref$[i$];
        dirs.push(this.config[key].dir);
      }
      return dirs;
    };
    prototype.configKeys = function(){
      if (!this.config.scripts) {
        return [];
      }
      return Object.keys(this.config);
    };
    prototype.normalizeKeyFiles = function(){
      var i$, ref$, len$, key, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.configKeys()).length; i$ < len$; ++i$) {
        key = ref$[i$];
        results$.push(this.normalizeFilesFor(key, this.config[key]));
      }
      return results$;
    };
    prototype.normalizeKeyDirs = function(){
      var i$, ref$, len$, key, results$ = [];
      this.setRoot();
      for (i$ = 0, len$ = (ref$ = this.configKeys()).length; i$ < len$; ++i$) {
        key = ref$[i$];
        results$.push(this.normalizeDirFor(key, this.config[key]));
      }
      return results$;
    };
    prototype.normalizeFilesFor = function(key, config){
      var root;
      if (key === 'dir') {
        return;
      }
      if (!config.files) {
        return;
      }
      root = this.rootPathOf(config.files).find();
      if (!isBlank(root)) {
        config.dir = root;
        return this.config[key] = this.pathShortener(config).shortenPaths();
      }
    };
    prototype.normalizeDirFor = function(key, config){
      if (key === 'dir') {
        return;
      }
      if (!config.dir) {
        return;
      }
      return this.config[key] = this.pathShortener(config, this.root).shortenPaths();
    };
    prototype.rootPathOf = function(files){
      return new RootPath(files);
    };
    prototype.pathShortener = function(config, root){
      config || (config = this.config);
      return new PathShortener(config, root);
    };
    return PathNormalizer;
  }());
}).call(this);
