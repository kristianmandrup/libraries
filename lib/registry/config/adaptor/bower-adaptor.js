// Generated by LiveScript 1.2.0
(function(){
  var FileIO, bowerClient, search, syncRequest, fs, util, isBlank, BowerAdapter, toString$ = {}.toString, slice$ = [].slice;
  FileIO = require('../../../file-io');
  bowerClient = require('bower-registry-client');
  search = bowerClient.search;
  syncRequest = require('sync-request');
  fs = require('fs-extra');
  util = require('util');
  isBlank = function(str){
    return !str || /^\s*$/.test(str);
  };
  module.exports = BowerAdapter = (function(){
    BowerAdapter.displayName = 'BowerAdapter';
    var prototype = BowerAdapter.prototype, constructor = BowerAdapter;
    importAll$(prototype, arguments[0]);
    function BowerAdapter(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      this.validate();
      if (this.options.repo) {
        this.repos.push(this.options.repo);
      }
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name of bower component must be a String, was: " + util.inspect(this.name));
      }
    };
    prototype.adapt = function(){
      return {
        main: this.main(),
        files: slice$.call(this.files, 1, -1 + 1 || 9e9)
      };
    };
    prototype.main = function(){
      return this.files[0];
    };
    prototype.files = function(){
      if (this.hasMain()) {
        return this.mainFiles();
      } else {
        return [];
      }
    };
    prototype.hasMain = function(){
      return !!this.mainFiles();
    };
    prototype.mainFiles = function(){
      return this.bowerJson().main;
    };
    prototype.bowerJson = function(){
      return this.bower || (this.bower = jsonlint(this.retrieve()));
    };
    prototype.retrieve = function(){
      this.extractRepo();
      return this.retrieved || (this.retrieved = syncRequest('GET', this.repoUri()).getBody());
    };
    prototype.repoTranslator = function(){
      return new GithubRepoTranslator(this.repo());
    };
    prototype.repoUri = function(){
      return this.repoTranslator().translate();
    };
    prototype.repos = [];
    prototype.repo = function(){
      if (this.repos().length === 0) {
        this.findRepos();
      }
      return this.repos[0];
    };
    prototype.findRepos = function(){
      return find(function(repos){
        return this.repos.push(repos);
      });
    };
    prototype.find = function(cb){
      return search(this.name, function(err, data){
        if (err) {
          console.err(err);
          throw new Error("Error on bower search: " + name);
        }
        return cb(data);
      });
    };
    prototype.load = function(){};
    return BowerAdapter;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
