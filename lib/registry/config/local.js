// Generated by LiveScript 1.2.0
(function(){
  var Loader, LocalConfigLoader;
  Loader = require('./loader');
  module.exports = LocalConfigLoader = (function(superclass){
    var prototype = extend$((import$(LocalConfigLoader, superclass).displayName = 'LocalConfigLoader', LocalConfigLoader), superclass).prototype, constructor = LocalConfigLoader;
    function LocalConfigLoader(name, path, options){
      this.name = name;
      this.path = path;
      this.options = options != null
        ? options
        : {};
      LocalConfigLoader.superclass.apply(this, arguments);
      this.validate();
      this;
    }
    prototype.loader = function(){
      return new Loader('file', this.name, this.path, this.options);
    };
    prototype.load = function(){
      return this.loader().load();
    };
    return LocalConfigLoader;
  }(BaseConfigLoader));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
