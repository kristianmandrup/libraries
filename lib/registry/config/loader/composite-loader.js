// Generated by LiveScript 1.2.0
(function(){
  var RemoteLoader, LocalLoader, BaseLoader, CompositeLoader;
  RemoteLoader = require('./remote-loader');
  LocalLoader = require('./local-loader');
  BaseLoader = require('./base-loader');
  module.exports = CompositeLoader = (function(superclass){
    var prototype = extend$((import$(CompositeLoader, superclass).displayName = 'CompositeLoader', CompositeLoader), superclass).prototype, constructor = CompositeLoader;
    function CompositeLoader(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      CompositeLoader.superclass.apply(this, arguments);
      this.validate();
      this;
    }
    prototype.validate = function(){};
    prototype.local = function(){
      return this._local || (this._local = new LocalLoader(this.name, this.options));
    };
    prototype.remote = function(){
      return this._remote || (this._remote = new RemoteLoader(this.name, this.options));
    };
    prototype.loadConfig = function(){
      if (!this.local().hasConfig(this.name)) {
        this.remote().install();
      }
      return this.local().loadConfig();
    };
    return CompositeLoader;
  }(BaseLoader));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
