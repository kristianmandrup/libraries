// Generated by LiveScript 1.2.0
(function(){
  var BaseLoader, FileLoader, JsonLoader, CompositeLoader, Normalizer, LocalLoader;
  BaseLoader = require('./base-loader');
  FileLoader = require('./local/file-loader');
  JsonLoader = require('./local/json-loader');
  CompositeLoader = require('./local/composite-loader');
  Normalizer = require('../normalizer');
  module.exports = LocalLoader = (function(superclass){
    var prototype = extend$((import$(LocalLoader, superclass).displayName = 'LocalLoader', LocalLoader), superclass).prototype, constructor = LocalLoader;
    function LocalLoader(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      LocalLoader.superclass.apply(this, arguments);
      this.loader = this.options.loader || 'composite';
      this.component = this.options.component || 'bower';
      this.path = this.options.path;
      this.validate();
      this;
    }
    prototype.validate = function(){};
    prototype.loadConfig = function(){
      return this.normalize(this.adapted());
    };
    prototype.hasConfig = function(name){
      name || (name = this.name);
      return this.adapted().hasConfig(name);
    };
    prototype.normalize = function(config){
      return this.normalizer(config).normalize();
    };
    prototype.normalizer = function(config){
      return new Normalizer(config, this.component);
    };
    prototype.adapted = function(){
      return this.adapter().adapt();
    };
    prototype.adapter = function(){
      return new this.selectedLoader()(this.name, this.path, this.options);
    };
    prototype.selectedLoader = function(){
      return this.loaders()[this.loader] || this.badLoader();
    };
    prototype.loaders = function(){
      return {
        file: FileLoader,
        json: JsonLoader,
        composite: CompositeLoader
      };
    };
    prototype.badLoader = function(){
      throw new Error("unknown Loader " + this.loader);
    };
    return LocalLoader;
  }(BaseLoader));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
