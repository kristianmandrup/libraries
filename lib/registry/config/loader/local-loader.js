// Generated by LiveScript 1.2.0
(function(){
  var FileLoader, JsonLoader, CompositeLoader, LocalLoader, toString$ = {}.toString;
  FileLoader = require('./local/file-loader');
  JsonLoader = require('./local/json-loader');
  CompositeLoader = require('./local/composite-loader');
  module.exports = LocalLoader = (function(){
    LocalLoader.displayName = 'LocalLoader';
    var prototype = LocalLoader.prototype, constructor = LocalLoader;
    function LocalLoader(name, options){
      this.name = name;
      this.options = options != null
        ? options
        : {};
      this.loader = this.options.loader || 'composite';
      this.component = this.options.component || 'bower';
      this.path = this.options.path;
      this.validate();
    }
    prototype.validate = function(){
      if (toString$.call(this.type).slice(8, -1) !== 'String') {
        throw new Error("Type must be a String, was: " + this.type);
      }
    };
    prototype.loadConfig = function(){
      return this.normalize(this.adapted());
    };
    prototype.normalize = function(config){
      return this.normalizer(config).normalize();
    };
    prototype.normalizer = function(config){
      return new Normalizer(config, this.componentType);
    };
    prototype.adapted = function(){
      return this.adapter().adapt();
    };
    prototype.adapter = function(){
      return new this.selectedLoader()(this.name, this.path, this.options);
    };
    prototype.selectedLoader = function(){
      return this.loaders[this.type] || this.badLoader();
    };
    prototype.loaders = function(){
      return {
        file: FileLoader,
        json: JsonLoader,
        composite: CompositeLoader
      };
    };
    prototype.badLoader = function(){
      throw new Error("unknown Installer " + this.type);
    };
    return LocalLoader;
  }());
}).call(this);
