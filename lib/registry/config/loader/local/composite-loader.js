// Generated by LiveScript 1.2.0
(function(){
  var BaseLoader, FileLoader, JsonLoader, CompositeConfigLoader, toString$ = {}.toString;
  BaseLoader = require('../base-loader');
  FileLoader = require('./file-loader');
  JsonLoader = require('./json-loader');
  module.exports = CompositeConfigLoader = (function(superclass){
    var prototype = extend$((import$(CompositeConfigLoader, superclass).displayName = 'CompositeConfigLoader', CompositeConfigLoader), superclass).prototype, constructor = CompositeConfigLoader;
    function CompositeConfigLoader(name, path, options){
      this.name = name;
      this.path = path;
      this.options = options != null
        ? options
        : {};
      CompositeConfigLoader.superclass.apply(this, arguments);
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.path).slice(8, -1) !== 'String') {
        throw new Error("Path of config to load must be a String, was: " + this.path);
      }
    };
    prototype.hasConfig = function(name){
      var i$, ref$, len$, loader;
      name || (name = this.name);
      for (i$ = 0, len$ = (ref$ = this.loaders()).length; i$ < len$; ++i$) {
        loader = ref$[i$];
        if (loader.hasConfig(name)) {
          return true;
        }
      }
    };
    prototype.loadConfig = function(name){
      var i$, ref$, len$, loader, conf;
      for (i$ = 0, len$ = (ref$ = this.loaders()).length; i$ < len$; ++i$) {
        loader = ref$[i$];
        conf = loader.loadConfig(name);
        if (conf) {
          return conf;
        }
      }
    };
    prototype.loaders = function(){
      return [this.fileLoader(), this.jsonLoader()];
    };
    prototype.fileLoader = function(){
      return this._fileLoader || (this._fileLoader = new FileLoader(this.name, this.path, this.options));
    };
    prototype.jsonLoader = function(){
      return this._jsonLoader || (this._jsonLoader = new JsonLoader(this.name, this.path, this.options));
    };
    return CompositeConfigLoader;
  }(BaseLoader));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
