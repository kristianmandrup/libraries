// Generated by LiveScript 1.2.0
(function(){
  var BaseConfigLoader, JsonConfigLoader, toString$ = {}.toString;
  BaseConfigLoader = require('./base');
  module.exports = JsonConfigLoader = (function(superclass){
    var prototype = extend$((import$(JsonConfigLoader, superclass).displayName = 'JsonConfigLoader', JsonConfigLoader), superclass).prototype, constructor = JsonConfigLoader;
    function JsonConfigLoader(name, path, options){
      this.name = name;
      this.path = path;
      this.options = options != null
        ? options
        : {};
      JsonConfigLoader.superclass.apply(this, arguments);
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.path).slice(8, -1) !== 'String') {
        throw new Error("Path of config to load must be a String, was: " + this.path);
      }
      if (!this.exisits(this.configFile())) {
        throw new Error("Components file " + this.configFile() + " does not exist");
      }
    };
    prototype.loadConfig = function(name){
      return this.jsonConfig()[name];
    };
    prototype.hasConfig = function(name){
      name || (name = this.name);
      return !!this.loadConfig()(name);
    };
    prototype.jsonConfig = function(){
      var name;
      name || (name = this.name);
      return this._jsonConf || -this.json(this.configFile());
    };
    prototype.configFile = function(){
      return [this.path, "components.json"].join('/');
    };
    return JsonConfigLoader;
  }(BaseConfigLoader));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
