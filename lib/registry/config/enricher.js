// Generated by LiveScript 1.2.0
(function(){
  var PkgAdapter, Enricher, toString$ = {}.toString;
  PkgAdapter = require('./package/pkg-adapter');
  module.exports = Enricher = (function(){
    Enricher.displayName = 'Enricher';
    var prototype = Enricher.prototype, constructor = Enricher;
    function Enricher(config, options){
      this.config = config;
      this.options = options != null
        ? options
        : {};
      this.name = options.name;
      this.type = options.type;
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.name).slice(8, -1) !== 'String') {
        throw new Error("Name must be a String, was: " + this.name);
      }
      if (toString$.call(this.type).slice(8, -1) !== 'String') {
        throw new Error("Type must be a String, was: " + this.type);
      }
      if (toString$.call(this.config).slice(8, -1) !== 'Object') {
        throw new Error("Config must be an Object, was: " + this.config);
      }
    };
    prototype.enrich = function(){
      this.adapt();
      import$(this.config, this.adapted());
      return this.config;
    };
    prototype.adapted = function(){
      return this._adapted || {};
    };
    prototype.adapt = function(){
      return this._adapted || (this._adapted = this.pkgAdapter().adapt());
    };
    prototype.pkgAdapter = function(){
      return new PkgAdapter(this.options);
    };
    return Enricher;
  }());
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
