// Generated by LiveScript 1.2.0
(function(){
  var FileIO, BaseInstaller, fs, util, isBlank, GlobalConfig, gconf, JsonInstaller, toString$ = {}.toString;
  FileIO = require('../../../util/file-io');
  BaseInstaller = require('./base-installer');
  fs = require('fs-extra');
  util = require('util');
  isBlank = function(str){
    return !str || /^\s*$/.test(str);
  };
  GlobalConfig = require('../../../global-config');
  gconf = new GlobalConfig;
  module.exports = JsonInstaller = (function(superclass){
    var prototype = extend$((import$(JsonInstaller, superclass).displayName = 'JsonInstaller', JsonInstaller), superclass).prototype, constructor = JsonInstaller;
    importAll$(prototype, arguments[1]);
    function JsonInstaller(name, source, options){
      this.name = name;
      this.source = source;
      this.options = options != null
        ? options
        : {};
      this.file = this.options.file || gconf.location('components.file');
      JsonInstaller.superclass.apply(this, arguments);
      this.convert();
      this.validate();
      this.content = void 8;
    }
    prototype.convert = function(){
      var e;
      if (isBlank(this.source)) {
        throw new Error("Source must be an Object or a JSON string, was: " + util.inspect(this.source));
      }
      if (toString$.call(this.source).slice(8, -1) === 'String') {
        try {
          return this.source = this.jsonlint(this.source);
        } catch (e$) {
          e = e$;
          this.error("Can't convert source to valid JSON", e);
          throw new Error("Can't convert source to valid JSON");
        }
      }
    };
    prototype.components = function(){
      return this.json();
    };
    prototype.stringified = function(){
      return JSON.stringify(this.components(), null, 4);
    };
    prototype.install = function(force){
      var err;
      if (this.components()[this.name] && !force) {
        return;
      }
      try {
        this.installing();
        this.components()[this.name] = this.source;
        this.content = this.stringified();
        this.writeFile();
        return true;
      } catch (e$) {
        err = e$;
        this.error(err);
      }
    };
    prototype.uninstall = function(){
      var err;
      try {
        if (this.components()[this.name]) {
          delete this.components()[this.name];
        }
        this.content = this.stringified();
        this.writeFile();
        return true;
      } catch (e$) {
        err = e$;
        return this.error(err);
      }
    };
    return JsonInstaller;
  }(BaseInstaller, FileIO));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
