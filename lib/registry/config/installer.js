// Generated by LiveScript 1.2.0
(function(){
  var FileInstaller, JsonInstaller, Installer, slice$ = [].slice, toString$ = {}.toString;
  FileInstaller = require('./installer/file-installer');
  JsonInstaller = require('./installer/json-installer');
  module.exports = Installer = (function(){
    Installer.displayName = 'Installer';
    var prototype = Installer.prototype, constructor = Installer;
    function Installer(type){
      this.type = type;
      this.args = slice$.call(arguments, 1);
      this.type || (this.type = 'file');
      this.validate();
    }
    prototype.validate = function(){
      if (toString$.call(this.type).slice(8, -1) !== 'String') {
        throw new Error("Type must be a String, was: " + this.type);
      }
    };
    prototype.install = function(name, opts){
      opts == null && (opts = {});
      if (typeof name !== 'string') {
        throw Error("Must have a name of component to install, was: " + name);
      }
      if (!opts.source) {
        throw Error("Missing source to install from, was: " + opts);
      }
      return this.installer().install(name, opts.source, opts);
    };
    prototype.installer = function(){
      var clazz;
      clazz = this.selectedInstaller();
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(clazz, this.args, function(){});
    };
    prototype.selectedInstaller = function(){
      return this.installers[this.type] || this.badInstaller();
    };
    prototype.badInstaller = function(){
      return this.error("Installer " + this.type + " has not been registered");
    };
    prototype.error = function(msg){
      console.error(msg);
      throw new Error(msg);
    };
    prototype.installers = {
      file: FileInstaller,
      json: JsonInstaller
    };
    return Installer;
  }());
}).call(this);
