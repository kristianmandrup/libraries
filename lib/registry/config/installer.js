// Generated by LiveScript 1.2.0
(function(){
  var FileInstaller, JsonInstaller, Installer, slice$ = [].slice, toString$ = {}.toString;
  FileInstaller = require('./installer/file-installer');
  JsonInstaller = require('./installer/json-installer');
  module.exports = Installer = (function(){
    Installer.displayName = 'Installer';
    var prototype = Installer.prototype, constructor = Installer;
    function Installer(type){
      this.type = type;
      this.args = slice$.call(arguments, 1);
      this.type || (this.type = 'file');
      this.validate();
    }
    prototype.validate = function(){
      if (toString$.call(this.type).slice(8, -1) !== 'String') {
        throw new Error("Type must be a String, was: " + this.type);
      }
    };
    prototype.installer = function(){
      return new this.selectedInstaller().apply(null, this.args);
    };
    prototype.selectedInstaller = function(){
      return this.installers[this.type] || this.badAdapter();
    };
    prototype.badInstaller = function(){
      return this.error("Installer " + this.type + " has not been registered");
    };
    prototype.error = function(msg){
      console.error(msg);
      throw new Error(msg);
    };
    prototype.installers = function(){
      return {
        file: FileInstaller,
        json: JsonInstaller
      };
    };
    return Installer;
  }());
}).call(this);
