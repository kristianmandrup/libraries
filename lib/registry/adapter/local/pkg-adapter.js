// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Installer, BaseAdapter, fs, syncRequest, retrieve, GlobalConfig, gconf, RegistryPackageAdapter, toString$ = {}.toString;
  FileIO = require('../../../util/file-io');
  Installer = require('../../config/installer');
  BaseAdapter = require('../../base-adapter');
  fs = require('fs-extra');
  syncRequest = require('sync-request');
  retrieve = require('../../../util/remote').retrieve;
  GlobalConfig = require('../../../global-config');
  gconf = new GlobalConfig;
  module.exports = RegistryPackageAdapter = (function(superclass){
    var prototype = extend$((import$(RegistryPackageAdapter, superclass).displayName = 'RegistryPackageAdapter', RegistryPackageAdapter), superclass).prototype, constructor = RegistryPackageAdapter;
    importAll$(prototype, arguments[1]);
    function RegistryPackageAdapter(options){
      this.options = options != null
        ? options
        : {};
      this.type || (this.type = 'bower');
      this.installerType = this.options.installer || 'file';
      this.registryPath = this.options.path || this.defaultPath();
      RegistryPackageAdapter.superclass.apply(this, arguments);
    }
    prototype.defaultPath = function(){
      return gconf.dirFor(this.type);
    };
    prototype.validate = function(){
      if (toString$.call(this.registryUri).slice(8, -1) !== 'String') {
        throw new Error("registryUri must be a String, was:");
      }
      if (toString$.call(this.localRegistryPath).slice(8, -1) !== 'String') {
        throw new Error("localRegistryPath must be a String, was " + this.localRegistryPath);
      }
    };
    prototype.installer = function(type){
      type || (type = this.installerType);
      return this._installer || (this._installer = new Installer(type));
    };
    prototype.install = function(name){
      return this.installer().install({
        source: this.readConfig(name),
        target: this.targetConfig(name)
      });
    };
    prototype.readConfig = function(name){
      return this.index()[name];
    };
    prototype.registryLibsUri = function(){
      return this.registryLocationParts().join('/');
    };
    prototype.registryLocationParts = function(){
      return [this.registryUri, this.registriesPath(), this.libsFile()].filter(function(part){
        return !!part;
      });
    };
    prototype.registriesPath = function(){
      return 'registries';
    };
    prototype.libsFile = function(){
      return this.type + "-libs.json";
    };
    prototype.indexContent = function(options){
      options == null && (options = {});
      return this._indexContent || (this._indexContent = this.retrieve().then(function(body){
        return body;
      }));
    };
    prototype.retrieve = function(){
      return this.retrieveBody(this.registryLibsUri());
    };
    prototype.retrieveBody = function(uri){
      var deferred, this$ = this;
      deferred = Q.defer();
      fs.readFile(uri, deferred.makeNodeResolver());
      return deferred.promise.then(function(body){
        return body;
      });
    };
    prototype.index = function(){
      return this.indexContent().then(function(body){
        return jsonlint.parse(body);
      });
    };
    prototype.list = function(){
      return this._list || (this._list = this.index().then(function(obj){
        return Object.keys(obj);
      }));
    };
    return RegistryPackageAdapter;
  }(BaseAdapter, FileIO));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
