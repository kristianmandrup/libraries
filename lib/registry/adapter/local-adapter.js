// Generated by LiveScript 1.2.0
(function(){
  var FileAdapter, PkgAdapter, BasicRegistryAdapter, LocalRegistryAdapter;
  FileAdapter = require('./local/file-adapter');
  PkgAdapter = require('./local/pkg-adapter');
  BasicRegistryAdapter = require('./basic-adapter');
  module.exports = LocalRegistryAdapter = (function(superclass){
    var prototype = extend$((import$(LocalRegistryAdapter, superclass).displayName = 'LocalRegistryAdapter', LocalRegistryAdapter), superclass).prototype, constructor = LocalRegistryAdapter;
    function LocalRegistryAdapter(options){
      this.options = options != null
        ? options
        : {};
      LocalRegistryAdapter.superclass.apply(this, arguments);
      this;
    }
    prototype.adapters = {
      file: FileAdapter,
      pkg: PkgAdapter
    };
    return LocalRegistryAdapter;
  }(BasicRegistryAdapter));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
