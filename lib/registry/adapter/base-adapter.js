// Generated by LiveScript 1.2.0
/**
 * User: kristianmandrup
 * Date: 17/10/14
 * Time: 20:31
 */
(function(){
  var FileIO, Installer, Enricher, GlobalConfig, gconf, BaseAdapter;
  FileIO = require('../../util/file-io');
  Installer = require('../config/installer');
  Enricher = require('../config/enricher');
  GlobalConfig = require('../../global-config');
  gconf = new GlobalConfig;
  module.exports = BaseAdapter = (function(){
    BaseAdapter.displayName = 'BaseAdapter';
    var prototype = BaseAdapter.prototype, constructor = BaseAdapter;
    importAll$(prototype, arguments[0]);
    function BaseAdapter(options){
      this.options = options != null
        ? options
        : {};
      this.registryUri || (this.registryUri = this.options.registry);
      this.localRegistryPath = this.options.local || gconf.components().dir();
      this.validate();
      this;
    }
    prototype.validate = function(){};
    prototype.enricher = function(){
      return new Enricher(this.options);
    };
    prototype.enrichAndNormalize = function(){
      this.enricher().enrich();
      this.normalizer().normalize();
      return this.config;
    };
    prototype.install = function(name){
      return this.installer().install({
        source: this.enrichedConfig(name),
        target: this.targetConfig(name)
      });
    };
    prototype.enrichedConfig = function(name){
      this.readConfig(name);
      return this.enrichAndNormalize();
    };
    prototype.installer = function(type){
      type || (type = this.installerType);
      return this._installer || (this._installer = new Installer(type));
    };
    prototype.list = function(){
      return this._list || (this._list = this.index().registry);
    };
    prototype.has = function(name){
      return this.list().indexOf(name) > -1;
    };
    prototype.configFile = function(name){
      return [this.registryUri, name + ".json"].join('/');
    };
    prototype.targetConfig = function(name){
      return [this.localRegistryPath, name + ".json"].join('/');
    };
    prototype.error = function(msg){
      return console.error(msg);
    };
    return BaseAdapter;
  }(FileIO));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
