// Generated by LiveScript 1.2.0
(function(){
  var UriAdapter, RemoteRegistryAdapter, toString$ = {}.toString;
  UriAdapter = require('./remote/uri-adapter');
  module.exports = RemoteRegistryAdapter = (function(){
    RemoteRegistryAdapter.displayName = 'RemoteRegistryAdapter';
    var prototype = RemoteRegistryAdapter.prototype, constructor = RemoteRegistryAdapter;
    function RemoteRegistryAdapter(options){
      this.options = options != null
        ? options
        : {};
      this.type || (this.type = this.options.type || 'bower');
      this.adapterType = 'pkg';
      RemoteRegistryAdapter.superclass.apply(this, arguments);
      this.validate();
      this;
    }
    prototype.validate = function(){
      if (toString$.call(this.type).slice(8, -1) !== 'String') {
        throw Error("Type must be a String, was: " + this.type);
      }
      if (toString$.call(this.adapterType).slice(8, -1) !== 'String') {
        throw Error("adapter type must be a String, was: " + this.adapterType);
      }
    };
    prototype.load = function(){
      return this.adapter().load();
    };
    prototype.adapter = function(){
      var clazz;
      clazz = this.selectedAdapter();
      return new clazz(this.options);
    };
    prototype.selectedAdapter = function(){
      return this.adapter[this.adapterType] || this.badAdapter();
    };
    prototype.adapters = {
      uri: UriAdapter
    };
    prototype.badAdapter = function(){
      throw new Error("unknown adapter " + this.adapterType);
    };
    return RemoteRegistryAdapter;
  }());
}).call(this);
