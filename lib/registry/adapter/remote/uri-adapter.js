// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Installer, BaseAdapter, fs, syncRequest, retrieve, RegistryUriAdapter, toString$ = {}.toString;
  FileIO = require('../../../util/file-io');
  Installer = require('../../config/installer');
  BaseAdapter = require('../../base-adapter');
  fs = require('fs-extra');
  syncRequest = require('sync-request');
  retrieve = require('../../../util/remote').retrieve;
  module.exports = RegistryUriAdapter = (function(superclass){
    var prototype = extend$((import$(RegistryUriAdapter, superclass).displayName = 'RegistryUriAdapter', RegistryUriAdapter), superclass).prototype, constructor = RegistryUriAdapter;
    importAll$(prototype, arguments[1]);
    function RegistryUriAdapter(options){
      this.options = options != null
        ? options
        : {};
      this.installerType = this.options.installer || 'file';
      this.repoType = this.options.repoType || 'github';
      this.type || (this.type = 'bower');
      this.registryUri = this.options.uri || this.repoUri();
      RegistryUriAdapter.superclass.apply(this, arguments);
      validate();
      this;
    }
    prototype.repoUri = function(){
      var clazz;
      clazz = this.repoClazz();
      return new clazz.registryPath(this.options.repo);
    };
    prototype.repoClazz = function(){
      return this.repos()[this.repoType];
    };
    prototype.repos = function(){
      return {
        github: require('./repo/github')
      };
    };
    prototype.validate = function(){
      if (toString$.call(this.registryUri).slice(8, -1) !== 'String') {
        throw new Error("registryUri must be a String, was:");
      }
    };
    prototype.readConfig = function(name){
      return this.config || (this.config = this.index()[name]);
    };
    prototype.registryLibsUri = function(){
      return this.registryLocationParts().join('/');
    };
    prototype.registryLocationParts = function(){};
    [RegistryUriAdapter.registryUri, RegistryUriAdapter.registriesPath(), RegistryUriAdapter.libsFile()].filter(function(part){
      return !!part;
    });
    prototype.registriesPath = function(){
      return 'registry';
    };
    prototype.libsFile = function(){
      return this.type + "-libs.json";
    };
    prototype.indexContent = function(options){
      options == null && (options = {});
      return this._indexContent || (this._indexContent = this.retrieve().then(function(body){
        return body;
      }));
    };
    prototype.retrieve = function(){
      var deferred, this$ = this;
      deferred = Q.defer();
      retrieve(this.registryLibsUri(), deferred.makeNodeResolver());
      return deferred.promise.then(function(body){
        return body;
      });
    };
    prototype.retrieveSync = function(){
      return syncRequest('GET', this.registryLibsUri()).getBody();
    };
    prototype.index = function(){
      return this.indexContent().then(function(body){
        return jsonlint.parse(body);
      });
    };
    prototype.list = function(){
      return this._list || (this._list = this.index().then(function(obj){
        return Object.keys(obj);
      }));
    };
    return RegistryUriAdapter;
  }(BaseAdapter, FileIO));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
