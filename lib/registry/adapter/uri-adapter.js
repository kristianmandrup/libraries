// Generated by LiveScript 1.2.0
(function(){
  var FileIO, Installer, BaseAdapter, fs, remote, retrieveRemote, registryUri, RegistryUriAdapter, toString$ = {}.toString;
  FileIO = require('../../file-io');
  Installer = require('../installer');
  BaseAdapter = require('./base-adapter');
  fs = require('fs-extra');
  remote = require('../../remote');
  retrieveRemote = remote.retrieveRemote;
  registryUri = 'https://raw.githubusercontent.com/kristianmandrup/libaries/master/registry';
  module.exports = RegistryUriAdapter = (function(superclass){
    var prototype = extend$((import$(RegistryUriAdapter, superclass).displayName = 'RegistryUriAdapter', RegistryUriAdapter), superclass).prototype, constructor = RegistryUriAdapter;
    importAll$(prototype, arguments[1]);
    function RegistryUriAdapter(options){
      this.options = options != null
        ? options
        : {};
      this.registryUri = this.options.registry || registryUri;
      RegistryUriAdapter.superclass.apply(this, arguments);
    }
    prototype.validate = function(){
      if (toString$.call(this.registryUri).slice(8, -1) !== 'String') {
        throw new Error("registryUri must be a String, was:");
      }
      if (toString$.call(this.localRegistryPath).slice(8, -1) !== 'String') {
        throw new Error("localRegistryPath must be a String, was " + this.localRegistryPath);
      }
    };
    prototype.installer = function(){
      return this._installer || (this._installer = new Installer);
    };
    prototype.install = function(name, type){
      type == null && (type = 'bower');
      return this.installer.install({
        source: this.readConfig(name, type),
        target: this.targetConfig(name)
      });
    };
    prototype.readConfig = function(name, type){
      return retrieveRemote(this.registryUriFor(type), function(body){
        return body;
      });
    };
    prototype.registryUriFor = function(type){
      return [this.registryUri, this.registryFile(type)].join('/');
    };
    prototype.registryFile = function(type){
      return type + "-libs.json";
    };
    prototype.indexContent = function(){
      return this._indexContent || (this._indexContent = retrieveRemote(this.registryUri, function(body){
        return body;
      }));
    };
    prototype.index = function(){
      return this.json(this.indexContent());
    };
    prototype.list = function(){
      return this._list || (this._list = this.index().registry);
    };
    return RegistryUriAdapter;
  }(BaseAdapter, FileIO));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
